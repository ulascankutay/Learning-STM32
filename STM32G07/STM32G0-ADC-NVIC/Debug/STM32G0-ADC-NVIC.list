
STM32G0-ADC-NVIC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000023f8  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080024b4  080024b4  000124b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080024f4  080024f4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080024f4  080024f4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080024f4  080024f4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080024f4  080024f4  000124f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080024f8  080024f8  000124f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080024fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000088  2000000c  08002508  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000094  08002508  00020094  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007099  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001797  00000000  00000000  00027110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007a0  00000000  00000000  000288a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000005a3  00000000  00000000  00029048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017390  00000000  00000000  000295eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000081aa  00000000  00000000  0004097b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00096910  00000000  00000000  00048b25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001a0c  00000000  00000000  000df438  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  000e0e44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800249c 	.word	0x0800249c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	0800249c 	.word	0x0800249c

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000220:	f000 fa1c 	bl	800065c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000224:	f000 f818 	bl	8000258 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000228:	f000 f8da 	bl	80003e0 <MX_GPIO_Init>
  MX_ADC1_Init();
 800022c:	f000 f872 	bl	8000314 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
   if( HAL_ADC_Start_IT(&hadc1)!= HAL_OK){
 8000230:	4b07      	ldr	r3, [pc, #28]	; (8000250 <main+0x34>)
 8000232:	0018      	movs	r0, r3
 8000234:	f000 fd98 	bl	8000d68 <HAL_ADC_Start_IT>
 8000238:	1e03      	subs	r3, r0, #0
 800023a:	d001      	beq.n	8000240 <main+0x24>
	   Error_Handler();
 800023c:	f000 f940 	bl	80004c0 <Error_Handler>
   }
   adc_deg=HAL_ADC_GetValue(&hadc1);
 8000240:	4b03      	ldr	r3, [pc, #12]	; (8000250 <main+0x34>)
 8000242:	0018      	movs	r0, r3
 8000244:	f000 fe08 	bl	8000e58 <HAL_ADC_GetValue>
 8000248:	0002      	movs	r2, r0
 800024a:	4b02      	ldr	r3, [pc, #8]	; (8000254 <main+0x38>)
 800024c:	601a      	str	r2, [r3, #0]
   /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800024e:	e7fe      	b.n	800024e <main+0x32>
 8000250:	20000028 	.word	0x20000028
 8000254:	2000008c 	.word	0x2000008c

08000258 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000258:	b590      	push	{r4, r7, lr}
 800025a:	b093      	sub	sp, #76	; 0x4c
 800025c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800025e:	2410      	movs	r4, #16
 8000260:	193b      	adds	r3, r7, r4
 8000262:	0018      	movs	r0, r3
 8000264:	2338      	movs	r3, #56	; 0x38
 8000266:	001a      	movs	r2, r3
 8000268:	2100      	movs	r1, #0
 800026a:	f002 f8eb 	bl	8002444 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800026e:	003b      	movs	r3, r7
 8000270:	0018      	movs	r0, r3
 8000272:	2310      	movs	r3, #16
 8000274:	001a      	movs	r2, r3
 8000276:	2100      	movs	r1, #0
 8000278:	f002 f8e4 	bl	8002444 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800027c:	2380      	movs	r3, #128	; 0x80
 800027e:	009b      	lsls	r3, r3, #2
 8000280:	0018      	movs	r0, r3
 8000282:	f001 fbfb 	bl	8001a7c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000286:	193b      	adds	r3, r7, r4
 8000288:	2202      	movs	r2, #2
 800028a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800028c:	193b      	adds	r3, r7, r4
 800028e:	2280      	movs	r2, #128	; 0x80
 8000290:	0052      	lsls	r2, r2, #1
 8000292:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000294:	0021      	movs	r1, r4
 8000296:	187b      	adds	r3, r7, r1
 8000298:	2200      	movs	r2, #0
 800029a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800029c:	187b      	adds	r3, r7, r1
 800029e:	2240      	movs	r2, #64	; 0x40
 80002a0:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002a2:	187b      	adds	r3, r7, r1
 80002a4:	2202      	movs	r2, #2
 80002a6:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002a8:	187b      	adds	r3, r7, r1
 80002aa:	2202      	movs	r2, #2
 80002ac:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80002ae:	187b      	adds	r3, r7, r1
 80002b0:	2200      	movs	r2, #0
 80002b2:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 80002b4:	187b      	adds	r3, r7, r1
 80002b6:	2208      	movs	r2, #8
 80002b8:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80002ba:	187b      	adds	r3, r7, r1
 80002bc:	2280      	movs	r2, #128	; 0x80
 80002be:	0292      	lsls	r2, r2, #10
 80002c0:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80002c2:	187b      	adds	r3, r7, r1
 80002c4:	2280      	movs	r2, #128	; 0x80
 80002c6:	0492      	lsls	r2, r2, #18
 80002c8:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80002ca:	187b      	adds	r3, r7, r1
 80002cc:	2280      	movs	r2, #128	; 0x80
 80002ce:	0592      	lsls	r2, r2, #22
 80002d0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002d2:	187b      	adds	r3, r7, r1
 80002d4:	0018      	movs	r0, r3
 80002d6:	f001 fc11 	bl	8001afc <HAL_RCC_OscConfig>
 80002da:	1e03      	subs	r3, r0, #0
 80002dc:	d001      	beq.n	80002e2 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80002de:	f000 f8ef 	bl	80004c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002e2:	003b      	movs	r3, r7
 80002e4:	2207      	movs	r2, #7
 80002e6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002e8:	003b      	movs	r3, r7
 80002ea:	2202      	movs	r2, #2
 80002ec:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002ee:	003b      	movs	r3, r7
 80002f0:	2200      	movs	r2, #0
 80002f2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002f4:	003b      	movs	r3, r7
 80002f6:	2200      	movs	r2, #0
 80002f8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002fa:	003b      	movs	r3, r7
 80002fc:	2102      	movs	r1, #2
 80002fe:	0018      	movs	r0, r3
 8000300:	f001 ff16 	bl	8002130 <HAL_RCC_ClockConfig>
 8000304:	1e03      	subs	r3, r0, #0
 8000306:	d001      	beq.n	800030c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000308:	f000 f8da 	bl	80004c0 <Error_Handler>
  }
}
 800030c:	46c0      	nop			; (mov r8, r8)
 800030e:	46bd      	mov	sp, r7
 8000310:	b013      	add	sp, #76	; 0x4c
 8000312:	bd90      	pop	{r4, r7, pc}

08000314 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b084      	sub	sp, #16
 8000318:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800031a:	1d3b      	adds	r3, r7, #4
 800031c:	0018      	movs	r0, r3
 800031e:	230c      	movs	r3, #12
 8000320:	001a      	movs	r2, r3
 8000322:	2100      	movs	r1, #0
 8000324:	f002 f88e 	bl	8002444 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000328:	4b2b      	ldr	r3, [pc, #172]	; (80003d8 <MX_ADC1_Init+0xc4>)
 800032a:	4a2c      	ldr	r2, [pc, #176]	; (80003dc <MX_ADC1_Init+0xc8>)
 800032c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800032e:	4b2a      	ldr	r3, [pc, #168]	; (80003d8 <MX_ADC1_Init+0xc4>)
 8000330:	2280      	movs	r2, #128	; 0x80
 8000332:	0612      	lsls	r2, r2, #24
 8000334:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000336:	4b28      	ldr	r3, [pc, #160]	; (80003d8 <MX_ADC1_Init+0xc4>)
 8000338:	2200      	movs	r2, #0
 800033a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800033c:	4b26      	ldr	r3, [pc, #152]	; (80003d8 <MX_ADC1_Init+0xc4>)
 800033e:	2200      	movs	r2, #0
 8000340:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000342:	4b25      	ldr	r3, [pc, #148]	; (80003d8 <MX_ADC1_Init+0xc4>)
 8000344:	2200      	movs	r2, #0
 8000346:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000348:	4b23      	ldr	r3, [pc, #140]	; (80003d8 <MX_ADC1_Init+0xc4>)
 800034a:	2208      	movs	r2, #8
 800034c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800034e:	4b22      	ldr	r3, [pc, #136]	; (80003d8 <MX_ADC1_Init+0xc4>)
 8000350:	2200      	movs	r2, #0
 8000352:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000354:	4b20      	ldr	r3, [pc, #128]	; (80003d8 <MX_ADC1_Init+0xc4>)
 8000356:	2200      	movs	r2, #0
 8000358:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800035a:	4b1f      	ldr	r3, [pc, #124]	; (80003d8 <MX_ADC1_Init+0xc4>)
 800035c:	2201      	movs	r2, #1
 800035e:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8000360:	4b1d      	ldr	r3, [pc, #116]	; (80003d8 <MX_ADC1_Init+0xc4>)
 8000362:	2201      	movs	r2, #1
 8000364:	61da      	str	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000366:	4b1c      	ldr	r3, [pc, #112]	; (80003d8 <MX_ADC1_Init+0xc4>)
 8000368:	2200      	movs	r2, #0
 800036a:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800036c:	4b1a      	ldr	r3, [pc, #104]	; (80003d8 <MX_ADC1_Init+0xc4>)
 800036e:	2200      	movs	r2, #0
 8000370:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000372:	4b19      	ldr	r3, [pc, #100]	; (80003d8 <MX_ADC1_Init+0xc4>)
 8000374:	222c      	movs	r2, #44	; 0x2c
 8000376:	2100      	movs	r1, #0
 8000378:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800037a:	4b17      	ldr	r3, [pc, #92]	; (80003d8 <MX_ADC1_Init+0xc4>)
 800037c:	2200      	movs	r2, #0
 800037e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8000380:	4b15      	ldr	r3, [pc, #84]	; (80003d8 <MX_ADC1_Init+0xc4>)
 8000382:	2200      	movs	r2, #0
 8000384:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8000386:	4b14      	ldr	r3, [pc, #80]	; (80003d8 <MX_ADC1_Init+0xc4>)
 8000388:	2200      	movs	r2, #0
 800038a:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 800038c:	4b12      	ldr	r3, [pc, #72]	; (80003d8 <MX_ADC1_Init+0xc4>)
 800038e:	223c      	movs	r2, #60	; 0x3c
 8000390:	2100      	movs	r1, #0
 8000392:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000394:	4b10      	ldr	r3, [pc, #64]	; (80003d8 <MX_ADC1_Init+0xc4>)
 8000396:	2200      	movs	r2, #0
 8000398:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800039a:	4b0f      	ldr	r3, [pc, #60]	; (80003d8 <MX_ADC1_Init+0xc4>)
 800039c:	0018      	movs	r0, r3
 800039e:	f000 fb3b 	bl	8000a18 <HAL_ADC_Init>
 80003a2:	1e03      	subs	r3, r0, #0
 80003a4:	d001      	beq.n	80003aa <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 80003a6:	f000 f88b 	bl	80004c0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80003aa:	1d3b      	adds	r3, r7, #4
 80003ac:	2201      	movs	r2, #1
 80003ae:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80003b0:	1d3b      	adds	r3, r7, #4
 80003b2:	2200      	movs	r2, #0
 80003b4:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80003b6:	1d3b      	adds	r3, r7, #4
 80003b8:	2200      	movs	r2, #0
 80003ba:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003bc:	1d3a      	adds	r2, r7, #4
 80003be:	4b06      	ldr	r3, [pc, #24]	; (80003d8 <MX_ADC1_Init+0xc4>)
 80003c0:	0011      	movs	r1, r2
 80003c2:	0018      	movs	r0, r3
 80003c4:	f000 fe7c 	bl	80010c0 <HAL_ADC_ConfigChannel>
 80003c8:	1e03      	subs	r3, r0, #0
 80003ca:	d001      	beq.n	80003d0 <MX_ADC1_Init+0xbc>
  {
    Error_Handler();
 80003cc:	f000 f878 	bl	80004c0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80003d0:	46c0      	nop			; (mov r8, r8)
 80003d2:	46bd      	mov	sp, r7
 80003d4:	b004      	add	sp, #16
 80003d6:	bd80      	pop	{r7, pc}
 80003d8:	20000028 	.word	0x20000028
 80003dc:	40012400 	.word	0x40012400

080003e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b086      	sub	sp, #24
 80003e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003e6:	1d3b      	adds	r3, r7, #4
 80003e8:	0018      	movs	r0, r3
 80003ea:	2314      	movs	r3, #20
 80003ec:	001a      	movs	r2, r3
 80003ee:	2100      	movs	r1, #0
 80003f0:	f002 f828 	bl	8002444 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003f4:	4b1d      	ldr	r3, [pc, #116]	; (800046c <MX_GPIO_Init+0x8c>)
 80003f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80003f8:	4b1c      	ldr	r3, [pc, #112]	; (800046c <MX_GPIO_Init+0x8c>)
 80003fa:	2101      	movs	r1, #1
 80003fc:	430a      	orrs	r2, r1
 80003fe:	635a      	str	r2, [r3, #52]	; 0x34
 8000400:	4b1a      	ldr	r3, [pc, #104]	; (800046c <MX_GPIO_Init+0x8c>)
 8000402:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000404:	2201      	movs	r2, #1
 8000406:	4013      	ands	r3, r2
 8000408:	603b      	str	r3, [r7, #0]
 800040a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800040c:	23a0      	movs	r3, #160	; 0xa0
 800040e:	05db      	lsls	r3, r3, #23
 8000410:	2200      	movs	r2, #0
 8000412:	2120      	movs	r1, #32
 8000414:	0018      	movs	r0, r3
 8000416:	f001 fb13 	bl	8001a40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800041a:	1d3b      	adds	r3, r7, #4
 800041c:	2210      	movs	r2, #16
 800041e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000420:	1d3b      	adds	r3, r7, #4
 8000422:	2288      	movs	r2, #136	; 0x88
 8000424:	0352      	lsls	r2, r2, #13
 8000426:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000428:	1d3b      	adds	r3, r7, #4
 800042a:	2200      	movs	r2, #0
 800042c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800042e:	1d3a      	adds	r2, r7, #4
 8000430:	23a0      	movs	r3, #160	; 0xa0
 8000432:	05db      	lsls	r3, r3, #23
 8000434:	0011      	movs	r1, r2
 8000436:	0018      	movs	r0, r3
 8000438:	f001 f99e 	bl	8001778 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800043c:	1d3b      	adds	r3, r7, #4
 800043e:	2220      	movs	r2, #32
 8000440:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000442:	1d3b      	adds	r3, r7, #4
 8000444:	2201      	movs	r2, #1
 8000446:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000448:	1d3b      	adds	r3, r7, #4
 800044a:	2200      	movs	r2, #0
 800044c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800044e:	1d3b      	adds	r3, r7, #4
 8000450:	2200      	movs	r2, #0
 8000452:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000454:	1d3a      	adds	r2, r7, #4
 8000456:	23a0      	movs	r3, #160	; 0xa0
 8000458:	05db      	lsls	r3, r3, #23
 800045a:	0011      	movs	r1, r2
 800045c:	0018      	movs	r0, r3
 800045e:	f001 f98b 	bl	8001778 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000462:	46c0      	nop			; (mov r8, r8)
 8000464:	46bd      	mov	sp, r7
 8000466:	b006      	add	sp, #24
 8000468:	bd80      	pop	{r7, pc}
 800046a:	46c0      	nop			; (mov r8, r8)
 800046c:	40021000 	.word	0x40021000

08000470 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
 void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	b082      	sub	sp, #8
 8000474:	af00      	add	r7, sp, #0
 8000476:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */

	 adc_deg=HAL_ADC_GetValue(&hadc1);
 8000478:	4b0f      	ldr	r3, [pc, #60]	; (80004b8 <HAL_ADC_ConvCpltCallback+0x48>)
 800047a:	0018      	movs	r0, r3
 800047c:	f000 fcec 	bl	8000e58 <HAL_ADC_GetValue>
 8000480:	0002      	movs	r2, r0
 8000482:	4b0e      	ldr	r3, [pc, #56]	; (80004bc <HAL_ADC_ConvCpltCallback+0x4c>)
 8000484:	601a      	str	r2, [r3, #0]

	 if(adc_deg<2000){
 8000486:	4b0d      	ldr	r3, [pc, #52]	; (80004bc <HAL_ADC_ConvCpltCallback+0x4c>)
 8000488:	681a      	ldr	r2, [r3, #0]
 800048a:	23fa      	movs	r3, #250	; 0xfa
 800048c:	00db      	lsls	r3, r3, #3
 800048e:	429a      	cmp	r2, r3
 8000490:	d207      	bcs.n	80004a2 <HAL_ADC_ConvCpltCallback+0x32>
		 HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5, GPIO_PIN_SET);
 8000492:	23a0      	movs	r3, #160	; 0xa0
 8000494:	05db      	lsls	r3, r3, #23
 8000496:	2201      	movs	r2, #1
 8000498:	2120      	movs	r1, #32
 800049a:	0018      	movs	r0, r3
 800049c:	f001 fad0 	bl	8001a40 <HAL_GPIO_WritePin>


  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80004a0:	e006      	b.n	80004b0 <HAL_ADC_ConvCpltCallback+0x40>
		 HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5, GPIO_PIN_RESET);
 80004a2:	23a0      	movs	r3, #160	; 0xa0
 80004a4:	05db      	lsls	r3, r3, #23
 80004a6:	2200      	movs	r2, #0
 80004a8:	2120      	movs	r1, #32
 80004aa:	0018      	movs	r0, r3
 80004ac:	f001 fac8 	bl	8001a40 <HAL_GPIO_WritePin>
}
 80004b0:	46c0      	nop			; (mov r8, r8)
 80004b2:	46bd      	mov	sp, r7
 80004b4:	b002      	add	sp, #8
 80004b6:	bd80      	pop	{r7, pc}
 80004b8:	20000028 	.word	0x20000028
 80004bc:	2000008c 	.word	0x2000008c

080004c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004c4:	b672      	cpsid	i
}
 80004c6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004c8:	e7fe      	b.n	80004c8 <Error_Handler+0x8>
	...

080004cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004d2:	4b11      	ldr	r3, [pc, #68]	; (8000518 <HAL_MspInit+0x4c>)
 80004d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80004d6:	4b10      	ldr	r3, [pc, #64]	; (8000518 <HAL_MspInit+0x4c>)
 80004d8:	2101      	movs	r1, #1
 80004da:	430a      	orrs	r2, r1
 80004dc:	641a      	str	r2, [r3, #64]	; 0x40
 80004de:	4b0e      	ldr	r3, [pc, #56]	; (8000518 <HAL_MspInit+0x4c>)
 80004e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80004e2:	2201      	movs	r2, #1
 80004e4:	4013      	ands	r3, r2
 80004e6:	607b      	str	r3, [r7, #4]
 80004e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004ea:	4b0b      	ldr	r3, [pc, #44]	; (8000518 <HAL_MspInit+0x4c>)
 80004ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80004ee:	4b0a      	ldr	r3, [pc, #40]	; (8000518 <HAL_MspInit+0x4c>)
 80004f0:	2180      	movs	r1, #128	; 0x80
 80004f2:	0549      	lsls	r1, r1, #21
 80004f4:	430a      	orrs	r2, r1
 80004f6:	63da      	str	r2, [r3, #60]	; 0x3c
 80004f8:	4b07      	ldr	r3, [pc, #28]	; (8000518 <HAL_MspInit+0x4c>)
 80004fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80004fc:	2380      	movs	r3, #128	; 0x80
 80004fe:	055b      	lsls	r3, r3, #21
 8000500:	4013      	ands	r3, r2
 8000502:	603b      	str	r3, [r7, #0]
 8000504:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8000506:	23c0      	movs	r3, #192	; 0xc0
 8000508:	00db      	lsls	r3, r3, #3
 800050a:	0018      	movs	r0, r3
 800050c:	f000 f92c 	bl	8000768 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000510:	46c0      	nop			; (mov r8, r8)
 8000512:	46bd      	mov	sp, r7
 8000514:	b002      	add	sp, #8
 8000516:	bd80      	pop	{r7, pc}
 8000518:	40021000 	.word	0x40021000

0800051c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800051c:	b590      	push	{r4, r7, lr}
 800051e:	b08b      	sub	sp, #44	; 0x2c
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000524:	2414      	movs	r4, #20
 8000526:	193b      	adds	r3, r7, r4
 8000528:	0018      	movs	r0, r3
 800052a:	2314      	movs	r3, #20
 800052c:	001a      	movs	r2, r3
 800052e:	2100      	movs	r1, #0
 8000530:	f001 ff88 	bl	8002444 <memset>
  if(hadc->Instance==ADC1)
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	4a1c      	ldr	r2, [pc, #112]	; (80005ac <HAL_ADC_MspInit+0x90>)
 800053a:	4293      	cmp	r3, r2
 800053c:	d131      	bne.n	80005a2 <HAL_ADC_MspInit+0x86>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800053e:	4b1c      	ldr	r3, [pc, #112]	; (80005b0 <HAL_ADC_MspInit+0x94>)
 8000540:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000542:	4b1b      	ldr	r3, [pc, #108]	; (80005b0 <HAL_ADC_MspInit+0x94>)
 8000544:	2180      	movs	r1, #128	; 0x80
 8000546:	0349      	lsls	r1, r1, #13
 8000548:	430a      	orrs	r2, r1
 800054a:	641a      	str	r2, [r3, #64]	; 0x40
 800054c:	4b18      	ldr	r3, [pc, #96]	; (80005b0 <HAL_ADC_MspInit+0x94>)
 800054e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000550:	2380      	movs	r3, #128	; 0x80
 8000552:	035b      	lsls	r3, r3, #13
 8000554:	4013      	ands	r3, r2
 8000556:	613b      	str	r3, [r7, #16]
 8000558:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800055a:	4b15      	ldr	r3, [pc, #84]	; (80005b0 <HAL_ADC_MspInit+0x94>)
 800055c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800055e:	4b14      	ldr	r3, [pc, #80]	; (80005b0 <HAL_ADC_MspInit+0x94>)
 8000560:	2101      	movs	r1, #1
 8000562:	430a      	orrs	r2, r1
 8000564:	635a      	str	r2, [r3, #52]	; 0x34
 8000566:	4b12      	ldr	r3, [pc, #72]	; (80005b0 <HAL_ADC_MspInit+0x94>)
 8000568:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800056a:	2201      	movs	r2, #1
 800056c:	4013      	ands	r3, r2
 800056e:	60fb      	str	r3, [r7, #12]
 8000570:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000572:	193b      	adds	r3, r7, r4
 8000574:	2201      	movs	r2, #1
 8000576:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000578:	193b      	adds	r3, r7, r4
 800057a:	2203      	movs	r2, #3
 800057c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800057e:	193b      	adds	r3, r7, r4
 8000580:	2200      	movs	r2, #0
 8000582:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000584:	193a      	adds	r2, r7, r4
 8000586:	23a0      	movs	r3, #160	; 0xa0
 8000588:	05db      	lsls	r3, r3, #23
 800058a:	0011      	movs	r1, r2
 800058c:	0018      	movs	r0, r3
 800058e:	f001 f8f3 	bl	8001778 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 0, 0);
 8000592:	2200      	movs	r2, #0
 8000594:	2100      	movs	r1, #0
 8000596:	200c      	movs	r0, #12
 8000598:	f001 f8bc 	bl	8001714 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_COMP_IRQn);
 800059c:	200c      	movs	r0, #12
 800059e:	f001 f8ce 	bl	800173e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80005a2:	46c0      	nop			; (mov r8, r8)
 80005a4:	46bd      	mov	sp, r7
 80005a6:	b00b      	add	sp, #44	; 0x2c
 80005a8:	bd90      	pop	{r4, r7, pc}
 80005aa:	46c0      	nop			; (mov r8, r8)
 80005ac:	40012400 	.word	0x40012400
 80005b0:	40021000 	.word	0x40021000

080005b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80005b8:	e7fe      	b.n	80005b8 <NMI_Handler+0x4>

080005ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005ba:	b580      	push	{r7, lr}
 80005bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005be:	e7fe      	b.n	80005be <HardFault_Handler+0x4>

080005c0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80005c4:	46c0      	nop			; (mov r8, r8)
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}

080005ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005ca:	b580      	push	{r7, lr}
 80005cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005ce:	46c0      	nop			; (mov r8, r8)
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}

080005d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005d8:	f000 f8aa 	bl	8000730 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005dc:	46c0      	nop			; (mov r8, r8)
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
	...

080005e4 <ADC1_COMP_IRQHandler>:

/**
  * @brief This function handles ADC1, COMP1 and COMP2 interrupts (COMP interrupts through EXTI lines 17 and 18).
  */
void ADC1_COMP_IRQHandler(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_COMP_IRQn 0 */

  /* USER CODE END ADC1_COMP_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80005e8:	4b03      	ldr	r3, [pc, #12]	; (80005f8 <ADC1_COMP_IRQHandler+0x14>)
 80005ea:	0018      	movs	r0, r3
 80005ec:	f000 fc40 	bl	8000e70 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 80005f0:	46c0      	nop			; (mov r8, r8)
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	46c0      	nop			; (mov r8, r8)
 80005f8:	20000028 	.word	0x20000028

080005fc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000600:	46c0      	nop			; (mov r8, r8)
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
	...

08000608 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000608:	480d      	ldr	r0, [pc, #52]	; (8000640 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800060a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800060c:	f7ff fff6 	bl	80005fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000610:	480c      	ldr	r0, [pc, #48]	; (8000644 <LoopForever+0x6>)
  ldr r1, =_edata
 8000612:	490d      	ldr	r1, [pc, #52]	; (8000648 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000614:	4a0d      	ldr	r2, [pc, #52]	; (800064c <LoopForever+0xe>)
  movs r3, #0
 8000616:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000618:	e002      	b.n	8000620 <LoopCopyDataInit>

0800061a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800061a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800061c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800061e:	3304      	adds	r3, #4

08000620 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000620:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000622:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000624:	d3f9      	bcc.n	800061a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000626:	4a0a      	ldr	r2, [pc, #40]	; (8000650 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000628:	4c0a      	ldr	r4, [pc, #40]	; (8000654 <LoopForever+0x16>)
  movs r3, #0
 800062a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800062c:	e001      	b.n	8000632 <LoopFillZerobss>

0800062e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800062e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000630:	3204      	adds	r2, #4

08000632 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000632:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000634:	d3fb      	bcc.n	800062e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000636:	f001 ff0d 	bl	8002454 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800063a:	f7ff fdef 	bl	800021c <main>

0800063e <LoopForever>:

LoopForever:
  b LoopForever
 800063e:	e7fe      	b.n	800063e <LoopForever>
  ldr   r0, =_estack
 8000640:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000644:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000648:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800064c:	080024fc 	.word	0x080024fc
  ldr r2, =_sbss
 8000650:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000654:	20000094 	.word	0x20000094

08000658 <CEC_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000658:	e7fe      	b.n	8000658 <CEC_IRQHandler>
	...

0800065c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000662:	1dfb      	adds	r3, r7, #7
 8000664:	2200      	movs	r2, #0
 8000666:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000668:	4b0b      	ldr	r3, [pc, #44]	; (8000698 <HAL_Init+0x3c>)
 800066a:	681a      	ldr	r2, [r3, #0]
 800066c:	4b0a      	ldr	r3, [pc, #40]	; (8000698 <HAL_Init+0x3c>)
 800066e:	2180      	movs	r1, #128	; 0x80
 8000670:	0049      	lsls	r1, r1, #1
 8000672:	430a      	orrs	r2, r1
 8000674:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000676:	2003      	movs	r0, #3
 8000678:	f000 f810 	bl	800069c <HAL_InitTick>
 800067c:	1e03      	subs	r3, r0, #0
 800067e:	d003      	beq.n	8000688 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000680:	1dfb      	adds	r3, r7, #7
 8000682:	2201      	movs	r2, #1
 8000684:	701a      	strb	r2, [r3, #0]
 8000686:	e001      	b.n	800068c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000688:	f7ff ff20 	bl	80004cc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800068c:	1dfb      	adds	r3, r7, #7
 800068e:	781b      	ldrb	r3, [r3, #0]
}
 8000690:	0018      	movs	r0, r3
 8000692:	46bd      	mov	sp, r7
 8000694:	b002      	add	sp, #8
 8000696:	bd80      	pop	{r7, pc}
 8000698:	40022000 	.word	0x40022000

0800069c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800069c:	b590      	push	{r4, r7, lr}
 800069e:	b085      	sub	sp, #20
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80006a4:	230f      	movs	r3, #15
 80006a6:	18fb      	adds	r3, r7, r3
 80006a8:	2200      	movs	r2, #0
 80006aa:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80006ac:	4b1d      	ldr	r3, [pc, #116]	; (8000724 <HAL_InitTick+0x88>)
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d02b      	beq.n	800070c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80006b4:	4b1c      	ldr	r3, [pc, #112]	; (8000728 <HAL_InitTick+0x8c>)
 80006b6:	681c      	ldr	r4, [r3, #0]
 80006b8:	4b1a      	ldr	r3, [pc, #104]	; (8000724 <HAL_InitTick+0x88>)
 80006ba:	781b      	ldrb	r3, [r3, #0]
 80006bc:	0019      	movs	r1, r3
 80006be:	23fa      	movs	r3, #250	; 0xfa
 80006c0:	0098      	lsls	r0, r3, #2
 80006c2:	f7ff fd1f 	bl	8000104 <__udivsi3>
 80006c6:	0003      	movs	r3, r0
 80006c8:	0019      	movs	r1, r3
 80006ca:	0020      	movs	r0, r4
 80006cc:	f7ff fd1a 	bl	8000104 <__udivsi3>
 80006d0:	0003      	movs	r3, r0
 80006d2:	0018      	movs	r0, r3
 80006d4:	f001 f843 	bl	800175e <HAL_SYSTICK_Config>
 80006d8:	1e03      	subs	r3, r0, #0
 80006da:	d112      	bne.n	8000702 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	2b03      	cmp	r3, #3
 80006e0:	d80a      	bhi.n	80006f8 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006e2:	6879      	ldr	r1, [r7, #4]
 80006e4:	2301      	movs	r3, #1
 80006e6:	425b      	negs	r3, r3
 80006e8:	2200      	movs	r2, #0
 80006ea:	0018      	movs	r0, r3
 80006ec:	f001 f812 	bl	8001714 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80006f0:	4b0e      	ldr	r3, [pc, #56]	; (800072c <HAL_InitTick+0x90>)
 80006f2:	687a      	ldr	r2, [r7, #4]
 80006f4:	601a      	str	r2, [r3, #0]
 80006f6:	e00d      	b.n	8000714 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80006f8:	230f      	movs	r3, #15
 80006fa:	18fb      	adds	r3, r7, r3
 80006fc:	2201      	movs	r2, #1
 80006fe:	701a      	strb	r2, [r3, #0]
 8000700:	e008      	b.n	8000714 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000702:	230f      	movs	r3, #15
 8000704:	18fb      	adds	r3, r7, r3
 8000706:	2201      	movs	r2, #1
 8000708:	701a      	strb	r2, [r3, #0]
 800070a:	e003      	b.n	8000714 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 800070c:	230f      	movs	r3, #15
 800070e:	18fb      	adds	r3, r7, r3
 8000710:	2201      	movs	r2, #1
 8000712:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000714:	230f      	movs	r3, #15
 8000716:	18fb      	adds	r3, r7, r3
 8000718:	781b      	ldrb	r3, [r3, #0]
}
 800071a:	0018      	movs	r0, r3
 800071c:	46bd      	mov	sp, r7
 800071e:	b005      	add	sp, #20
 8000720:	bd90      	pop	{r4, r7, pc}
 8000722:	46c0      	nop			; (mov r8, r8)
 8000724:	20000008 	.word	0x20000008
 8000728:	20000000 	.word	0x20000000
 800072c:	20000004 	.word	0x20000004

08000730 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000734:	4b05      	ldr	r3, [pc, #20]	; (800074c <HAL_IncTick+0x1c>)
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	001a      	movs	r2, r3
 800073a:	4b05      	ldr	r3, [pc, #20]	; (8000750 <HAL_IncTick+0x20>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	18d2      	adds	r2, r2, r3
 8000740:	4b03      	ldr	r3, [pc, #12]	; (8000750 <HAL_IncTick+0x20>)
 8000742:	601a      	str	r2, [r3, #0]
}
 8000744:	46c0      	nop			; (mov r8, r8)
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	46c0      	nop			; (mov r8, r8)
 800074c:	20000008 	.word	0x20000008
 8000750:	20000090 	.word	0x20000090

08000754 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
  return uwTick;
 8000758:	4b02      	ldr	r3, [pc, #8]	; (8000764 <HAL_GetTick+0x10>)
 800075a:	681b      	ldr	r3, [r3, #0]
}
 800075c:	0018      	movs	r0, r3
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	46c0      	nop			; (mov r8, r8)
 8000764:	20000090 	.word	0x20000090

08000768 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8000770:	4b06      	ldr	r3, [pc, #24]	; (800078c <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	4a06      	ldr	r2, [pc, #24]	; (8000790 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8000776:	4013      	ands	r3, r2
 8000778:	0019      	movs	r1, r3
 800077a:	4b04      	ldr	r3, [pc, #16]	; (800078c <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 800077c:	687a      	ldr	r2, [r7, #4]
 800077e:	430a      	orrs	r2, r1
 8000780:	601a      	str	r2, [r3, #0]
}
 8000782:	46c0      	nop			; (mov r8, r8)
 8000784:	46bd      	mov	sp, r7
 8000786:	b002      	add	sp, #8
 8000788:	bd80      	pop	{r7, pc}
 800078a:	46c0      	nop			; (mov r8, r8)
 800078c:	40010000 	.word	0x40010000
 8000790:	fffff9ff 	.word	0xfffff9ff

08000794 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
 800079c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	4a05      	ldr	r2, [pc, #20]	; (80007b8 <LL_ADC_SetCommonPathInternalCh+0x24>)
 80007a4:	401a      	ands	r2, r3
 80007a6:	683b      	ldr	r3, [r7, #0]
 80007a8:	431a      	orrs	r2, r3
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	601a      	str	r2, [r3, #0]
}
 80007ae:	46c0      	nop			; (mov r8, r8)
 80007b0:	46bd      	mov	sp, r7
 80007b2:	b002      	add	sp, #8
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	46c0      	nop			; (mov r8, r8)
 80007b8:	fe3fffff 	.word	0xfe3fffff

080007bc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	681a      	ldr	r2, [r3, #0]
 80007c8:	23e0      	movs	r3, #224	; 0xe0
 80007ca:	045b      	lsls	r3, r3, #17
 80007cc:	4013      	ands	r3, r2
}
 80007ce:	0018      	movs	r0, r3
 80007d0:	46bd      	mov	sp, r7
 80007d2:	b002      	add	sp, #8
 80007d4:	bd80      	pop	{r7, pc}

080007d6 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 80007d6:	b580      	push	{r7, lr}
 80007d8:	b084      	sub	sp, #16
 80007da:	af00      	add	r7, sp, #0
 80007dc:	60f8      	str	r0, [r7, #12]
 80007de:	60b9      	str	r1, [r7, #8]
 80007e0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 80007e2:	68fb      	ldr	r3, [r7, #12]
 80007e4:	695b      	ldr	r3, [r3, #20]
 80007e6:	68ba      	ldr	r2, [r7, #8]
 80007e8:	2104      	movs	r1, #4
 80007ea:	400a      	ands	r2, r1
 80007ec:	2107      	movs	r1, #7
 80007ee:	4091      	lsls	r1, r2
 80007f0:	000a      	movs	r2, r1
 80007f2:	43d2      	mvns	r2, r2
 80007f4:	401a      	ands	r2, r3
 80007f6:	68bb      	ldr	r3, [r7, #8]
 80007f8:	2104      	movs	r1, #4
 80007fa:	400b      	ands	r3, r1
 80007fc:	6879      	ldr	r1, [r7, #4]
 80007fe:	4099      	lsls	r1, r3
 8000800:	000b      	movs	r3, r1
 8000802:	431a      	orrs	r2, r3
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8000808:	46c0      	nop			; (mov r8, r8)
 800080a:	46bd      	mov	sp, r7
 800080c:	b004      	add	sp, #16
 800080e:	bd80      	pop	{r7, pc}

08000810 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
 8000818:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	695b      	ldr	r3, [r3, #20]
 800081e:	683a      	ldr	r2, [r7, #0]
 8000820:	2104      	movs	r1, #4
 8000822:	400a      	ands	r2, r1
 8000824:	2107      	movs	r1, #7
 8000826:	4091      	lsls	r1, r2
 8000828:	000a      	movs	r2, r1
 800082a:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 800082c:	683b      	ldr	r3, [r7, #0]
 800082e:	2104      	movs	r1, #4
 8000830:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000832:	40da      	lsrs	r2, r3
 8000834:	0013      	movs	r3, r2
}
 8000836:	0018      	movs	r0, r3
 8000838:	46bd      	mov	sp, r7
 800083a:	b002      	add	sp, #8
 800083c:	bd80      	pop	{r7, pc}

0800083e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800083e:	b580      	push	{r7, lr}
 8000840:	b082      	sub	sp, #8
 8000842:	af00      	add	r7, sp, #0
 8000844:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	68da      	ldr	r2, [r3, #12]
 800084a:	23c0      	movs	r3, #192	; 0xc0
 800084c:	011b      	lsls	r3, r3, #4
 800084e:	4013      	ands	r3, r2
 8000850:	d101      	bne.n	8000856 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000852:	2301      	movs	r3, #1
 8000854:	e000      	b.n	8000858 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000856:	2300      	movs	r3, #0
}
 8000858:	0018      	movs	r0, r3
 800085a:	46bd      	mov	sp, r7
 800085c:	b002      	add	sp, #8
 800085e:	bd80      	pop	{r7, pc}

08000860 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b084      	sub	sp, #16
 8000864:	af00      	add	r7, sp, #0
 8000866:	60f8      	str	r0, [r7, #12]
 8000868:	60b9      	str	r1, [r7, #8]
 800086a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000870:	68ba      	ldr	r2, [r7, #8]
 8000872:	211f      	movs	r1, #31
 8000874:	400a      	ands	r2, r1
 8000876:	210f      	movs	r1, #15
 8000878:	4091      	lsls	r1, r2
 800087a:	000a      	movs	r2, r1
 800087c:	43d2      	mvns	r2, r2
 800087e:	401a      	ands	r2, r3
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	0e9b      	lsrs	r3, r3, #26
 8000884:	210f      	movs	r1, #15
 8000886:	4019      	ands	r1, r3
 8000888:	68bb      	ldr	r3, [r7, #8]
 800088a:	201f      	movs	r0, #31
 800088c:	4003      	ands	r3, r0
 800088e:	4099      	lsls	r1, r3
 8000890:	000b      	movs	r3, r1
 8000892:	431a      	orrs	r2, r3
 8000894:	68fb      	ldr	r3, [r7, #12]
 8000896:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000898:	46c0      	nop			; (mov r8, r8)
 800089a:	46bd      	mov	sp, r7
 800089c:	b004      	add	sp, #16
 800089e:	bd80      	pop	{r7, pc}

080008a0 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
 80008a8:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80008ae:	683b      	ldr	r3, [r7, #0]
 80008b0:	035b      	lsls	r3, r3, #13
 80008b2:	0b5b      	lsrs	r3, r3, #13
 80008b4:	431a      	orrs	r2, r3
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80008ba:	46c0      	nop			; (mov r8, r8)
 80008bc:	46bd      	mov	sp, r7
 80008be:	b002      	add	sp, #8
 80008c0:	bd80      	pop	{r7, pc}

080008c2 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80008c2:	b580      	push	{r7, lr}
 80008c4:	b082      	sub	sp, #8
 80008c6:	af00      	add	r7, sp, #0
 80008c8:	6078      	str	r0, [r7, #4]
 80008ca:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008d0:	683a      	ldr	r2, [r7, #0]
 80008d2:	0352      	lsls	r2, r2, #13
 80008d4:	0b52      	lsrs	r2, r2, #13
 80008d6:	43d2      	mvns	r2, r2
 80008d8:	401a      	ands	r2, r3
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	629a      	str	r2, [r3, #40]	; 0x28
}
 80008de:	46c0      	nop			; (mov r8, r8)
 80008e0:	46bd      	mov	sp, r7
 80008e2:	b002      	add	sp, #8
 80008e4:	bd80      	pop	{r7, pc}

080008e6 <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(const ADC_TypeDef *ADCx)
{
 80008e6:	b580      	push	{r7, lr}
 80008e8:	b082      	sub	sp, #8
 80008ea:	af00      	add	r7, sp, #0
 80008ec:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	68db      	ldr	r3, [r3, #12]
 80008f2:	2203      	movs	r2, #3
 80008f4:	4013      	ands	r3, r2
}
 80008f6:	0018      	movs	r0, r3
 80008f8:	46bd      	mov	sp, r7
 80008fa:	b002      	add	sp, #8
 80008fc:	bd80      	pop	{r7, pc}
	...

08000900 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b084      	sub	sp, #16
 8000904:	af00      	add	r7, sp, #0
 8000906:	60f8      	str	r0, [r7, #12]
 8000908:	60b9      	str	r1, [r7, #8]
 800090a:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	695b      	ldr	r3, [r3, #20]
 8000910:	68ba      	ldr	r2, [r7, #8]
 8000912:	0212      	lsls	r2, r2, #8
 8000914:	43d2      	mvns	r2, r2
 8000916:	401a      	ands	r2, r3
 8000918:	68bb      	ldr	r3, [r7, #8]
 800091a:	021b      	lsls	r3, r3, #8
 800091c:	6879      	ldr	r1, [r7, #4]
 800091e:	400b      	ands	r3, r1
 8000920:	4904      	ldr	r1, [pc, #16]	; (8000934 <LL_ADC_SetChannelSamplingTime+0x34>)
 8000922:	400b      	ands	r3, r1
 8000924:	431a      	orrs	r2, r3
 8000926:	68fb      	ldr	r3, [r7, #12]
 8000928:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 800092a:	46c0      	nop			; (mov r8, r8)
 800092c:	46bd      	mov	sp, r7
 800092e:	b004      	add	sp, #16
 8000930:	bd80      	pop	{r7, pc}
 8000932:	46c0      	nop			; (mov r8, r8)
 8000934:	07ffff00 	.word	0x07ffff00

08000938 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	689b      	ldr	r3, [r3, #8]
 8000944:	4a05      	ldr	r2, [pc, #20]	; (800095c <LL_ADC_EnableInternalRegulator+0x24>)
 8000946:	4013      	ands	r3, r2
 8000948:	2280      	movs	r2, #128	; 0x80
 800094a:	0552      	lsls	r2, r2, #21
 800094c:	431a      	orrs	r2, r3
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000952:	46c0      	nop			; (mov r8, r8)
 8000954:	46bd      	mov	sp, r7
 8000956:	b002      	add	sp, #8
 8000958:	bd80      	pop	{r7, pc}
 800095a:	46c0      	nop			; (mov r8, r8)
 800095c:	6fffffe8 	.word	0x6fffffe8

08000960 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	689a      	ldr	r2, [r3, #8]
 800096c:	2380      	movs	r3, #128	; 0x80
 800096e:	055b      	lsls	r3, r3, #21
 8000970:	401a      	ands	r2, r3
 8000972:	2380      	movs	r3, #128	; 0x80
 8000974:	055b      	lsls	r3, r3, #21
 8000976:	429a      	cmp	r2, r3
 8000978:	d101      	bne.n	800097e <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 800097a:	2301      	movs	r3, #1
 800097c:	e000      	b.n	8000980 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 800097e:	2300      	movs	r3, #0
}
 8000980:	0018      	movs	r0, r3
 8000982:	46bd      	mov	sp, r7
 8000984:	b002      	add	sp, #8
 8000986:	bd80      	pop	{r7, pc}

08000988 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	689b      	ldr	r3, [r3, #8]
 8000994:	4a04      	ldr	r2, [pc, #16]	; (80009a8 <LL_ADC_Enable+0x20>)
 8000996:	4013      	ands	r3, r2
 8000998:	2201      	movs	r2, #1
 800099a:	431a      	orrs	r2, r3
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80009a0:	46c0      	nop			; (mov r8, r8)
 80009a2:	46bd      	mov	sp, r7
 80009a4:	b002      	add	sp, #8
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	7fffffe8 	.word	0x7fffffe8

080009ac <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	689b      	ldr	r3, [r3, #8]
 80009b8:	2201      	movs	r2, #1
 80009ba:	4013      	ands	r3, r2
 80009bc:	2b01      	cmp	r3, #1
 80009be:	d101      	bne.n	80009c4 <LL_ADC_IsEnabled+0x18>
 80009c0:	2301      	movs	r3, #1
 80009c2:	e000      	b.n	80009c6 <LL_ADC_IsEnabled+0x1a>
 80009c4:	2300      	movs	r3, #0
}
 80009c6:	0018      	movs	r0, r3
 80009c8:	46bd      	mov	sp, r7
 80009ca:	b002      	add	sp, #8
 80009cc:	bd80      	pop	{r7, pc}
	...

080009d0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	689b      	ldr	r3, [r3, #8]
 80009dc:	4a04      	ldr	r2, [pc, #16]	; (80009f0 <LL_ADC_REG_StartConversion+0x20>)
 80009de:	4013      	ands	r3, r2
 80009e0:	2204      	movs	r2, #4
 80009e2:	431a      	orrs	r2, r3
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80009e8:	46c0      	nop			; (mov r8, r8)
 80009ea:	46bd      	mov	sp, r7
 80009ec:	b002      	add	sp, #8
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	7fffffe8 	.word	0x7fffffe8

080009f4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	689b      	ldr	r3, [r3, #8]
 8000a00:	2204      	movs	r2, #4
 8000a02:	4013      	ands	r3, r2
 8000a04:	2b04      	cmp	r3, #4
 8000a06:	d101      	bne.n	8000a0c <LL_ADC_REG_IsConversionOngoing+0x18>
 8000a08:	2301      	movs	r3, #1
 8000a0a:	e000      	b.n	8000a0e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000a0c:	2300      	movs	r3, #0
}
 8000a0e:	0018      	movs	r0, r3
 8000a10:	46bd      	mov	sp, r7
 8000a12:	b002      	add	sp, #8
 8000a14:	bd80      	pop	{r7, pc}
	...

08000a18 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b088      	sub	sp, #32
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000a20:	231f      	movs	r3, #31
 8000a22:	18fb      	adds	r3, r7, r3
 8000a24:	2200      	movs	r2, #0
 8000a26:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000a30:	2300      	movs	r3, #0
 8000a32:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d101      	bne.n	8000a3e <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	e17f      	b.n	8000d3e <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d10a      	bne.n	8000a5c <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	0018      	movs	r0, r3
 8000a4a:	f7ff fd67 	bl	800051c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	2200      	movs	r2, #0
 8000a52:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	2254      	movs	r2, #84	; 0x54
 8000a58:	2100      	movs	r1, #0
 8000a5a:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	0018      	movs	r0, r3
 8000a62:	f7ff ff7d 	bl	8000960 <LL_ADC_IsInternalRegulatorEnabled>
 8000a66:	1e03      	subs	r3, r0, #0
 8000a68:	d115      	bne.n	8000a96 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	0018      	movs	r0, r3
 8000a70:	f7ff ff62 	bl	8000938 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8000a74:	4bb4      	ldr	r3, [pc, #720]	; (8000d48 <HAL_ADC_Init+0x330>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	49b4      	ldr	r1, [pc, #720]	; (8000d4c <HAL_ADC_Init+0x334>)
 8000a7a:	0018      	movs	r0, r3
 8000a7c:	f7ff fb42 	bl	8000104 <__udivsi3>
 8000a80:	0003      	movs	r3, r0
 8000a82:	3301      	adds	r3, #1
 8000a84:	005b      	lsls	r3, r3, #1
 8000a86:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000a88:	e002      	b.n	8000a90 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	3b01      	subs	r3, #1
 8000a8e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d1f9      	bne.n	8000a8a <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	0018      	movs	r0, r3
 8000a9c:	f7ff ff60 	bl	8000960 <LL_ADC_IsInternalRegulatorEnabled>
 8000aa0:	1e03      	subs	r3, r0, #0
 8000aa2:	d10f      	bne.n	8000ac4 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aa8:	2210      	movs	r2, #16
 8000aaa:	431a      	orrs	r2, r3
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	431a      	orrs	r2, r3
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8000abc:	231f      	movs	r3, #31
 8000abe:	18fb      	adds	r3, r7, r3
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	0018      	movs	r0, r3
 8000aca:	f7ff ff93 	bl	80009f4 <LL_ADC_REG_IsConversionOngoing>
 8000ace:	0003      	movs	r3, r0
 8000ad0:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ad6:	2210      	movs	r2, #16
 8000ad8:	4013      	ands	r3, r2
 8000ada:	d000      	beq.n	8000ade <HAL_ADC_Init+0xc6>
 8000adc:	e122      	b.n	8000d24 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000ade:	693b      	ldr	r3, [r7, #16]
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d000      	beq.n	8000ae6 <HAL_ADC_Init+0xce>
 8000ae4:	e11e      	b.n	8000d24 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aea:	4a99      	ldr	r2, [pc, #612]	; (8000d50 <HAL_ADC_Init+0x338>)
 8000aec:	4013      	ands	r3, r2
 8000aee:	2202      	movs	r2, #2
 8000af0:	431a      	orrs	r2, r3
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	0018      	movs	r0, r3
 8000afc:	f7ff ff56 	bl	80009ac <LL_ADC_IsEnabled>
 8000b00:	1e03      	subs	r3, r0, #0
 8000b02:	d000      	beq.n	8000b06 <HAL_ADC_Init+0xee>
 8000b04:	e0ad      	b.n	8000c62 <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	7e1b      	ldrb	r3, [r3, #24]
 8000b0e:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8000b10:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	7e5b      	ldrb	r3, [r3, #25]
 8000b16:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8000b18:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	7e9b      	ldrb	r3, [r3, #26]
 8000b1e:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8000b20:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d002      	beq.n	8000b30 <HAL_ADC_Init+0x118>
 8000b2a:	2380      	movs	r3, #128	; 0x80
 8000b2c:	015b      	lsls	r3, r3, #5
 8000b2e:	e000      	b.n	8000b32 <HAL_ADC_Init+0x11a>
 8000b30:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8000b32:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8000b38:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	691b      	ldr	r3, [r3, #16]
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	da04      	bge.n	8000b4c <HAL_ADC_Init+0x134>
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	691b      	ldr	r3, [r3, #16]
 8000b46:	005b      	lsls	r3, r3, #1
 8000b48:	085b      	lsrs	r3, r3, #1
 8000b4a:	e001      	b.n	8000b50 <HAL_ADC_Init+0x138>
 8000b4c:	2380      	movs	r3, #128	; 0x80
 8000b4e:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 8000b50:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	212c      	movs	r1, #44	; 0x2c
 8000b56:	5c5b      	ldrb	r3, [r3, r1]
 8000b58:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8000b5a:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8000b5c:	69ba      	ldr	r2, [r7, #24]
 8000b5e:	4313      	orrs	r3, r2
 8000b60:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	2220      	movs	r2, #32
 8000b66:	5c9b      	ldrb	r3, [r3, r2]
 8000b68:	2b01      	cmp	r3, #1
 8000b6a:	d115      	bne.n	8000b98 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	7e9b      	ldrb	r3, [r3, #26]
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d105      	bne.n	8000b80 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 8000b74:	69bb      	ldr	r3, [r7, #24]
 8000b76:	2280      	movs	r2, #128	; 0x80
 8000b78:	0252      	lsls	r2, r2, #9
 8000b7a:	4313      	orrs	r3, r2
 8000b7c:	61bb      	str	r3, [r7, #24]
 8000b7e:	e00b      	b.n	8000b98 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b84:	2220      	movs	r2, #32
 8000b86:	431a      	orrs	r2, r3
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b90:	2201      	movs	r2, #1
 8000b92:	431a      	orrs	r2, r3
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d00a      	beq.n	8000bb6 <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000ba4:	23e0      	movs	r3, #224	; 0xe0
 8000ba6:	005b      	lsls	r3, r3, #1
 8000ba8:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8000bae:	4313      	orrs	r3, r2
 8000bb0:	69ba      	ldr	r2, [r7, #24]
 8000bb2:	4313      	orrs	r3, r2
 8000bb4:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	68db      	ldr	r3, [r3, #12]
 8000bbc:	4a65      	ldr	r2, [pc, #404]	; (8000d54 <HAL_ADC_Init+0x33c>)
 8000bbe:	4013      	ands	r3, r2
 8000bc0:	0019      	movs	r1, r3
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	69ba      	ldr	r2, [r7, #24]
 8000bc8:	430a      	orrs	r2, r1
 8000bca:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	685b      	ldr	r3, [r3, #4]
 8000bd0:	0f9b      	lsrs	r3, r3, #30
 8000bd2:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000bd8:	4313      	orrs	r3, r2
 8000bda:	697a      	ldr	r2, [r7, #20]
 8000bdc:	4313      	orrs	r3, r2
 8000bde:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	223c      	movs	r2, #60	; 0x3c
 8000be4:	5c9b      	ldrb	r3, [r3, r2]
 8000be6:	2b01      	cmp	r3, #1
 8000be8:	d111      	bne.n	8000c0e <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	685b      	ldr	r3, [r3, #4]
 8000bee:	0f9b      	lsrs	r3, r3, #30
 8000bf0:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8000bf6:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                      hadc->Init.Oversampling.Ratio         |
 8000bfc:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                      hadc->Init.Oversampling.RightBitShift |
 8000c02:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 8000c04:	697b      	ldr	r3, [r7, #20]
 8000c06:	4313      	orrs	r3, r2
 8000c08:	2201      	movs	r2, #1
 8000c0a:	4313      	orrs	r3, r2
 8000c0c:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	691b      	ldr	r3, [r3, #16]
 8000c14:	4a50      	ldr	r2, [pc, #320]	; (8000d58 <HAL_ADC_Init+0x340>)
 8000c16:	4013      	ands	r3, r2
 8000c18:	0019      	movs	r1, r3
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	697a      	ldr	r2, [r7, #20]
 8000c20:	430a      	orrs	r2, r1
 8000c22:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	685a      	ldr	r2, [r3, #4]
 8000c28:	23c0      	movs	r3, #192	; 0xc0
 8000c2a:	061b      	lsls	r3, r3, #24
 8000c2c:	429a      	cmp	r2, r3
 8000c2e:	d018      	beq.n	8000c62 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8000c34:	2380      	movs	r3, #128	; 0x80
 8000c36:	05db      	lsls	r3, r3, #23
 8000c38:	429a      	cmp	r2, r3
 8000c3a:	d012      	beq.n	8000c62 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8000c40:	2380      	movs	r3, #128	; 0x80
 8000c42:	061b      	lsls	r3, r3, #24
 8000c44:	429a      	cmp	r2, r3
 8000c46:	d00c      	beq.n	8000c62 <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8000c48:	4b44      	ldr	r3, [pc, #272]	; (8000d5c <HAL_ADC_Init+0x344>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a44      	ldr	r2, [pc, #272]	; (8000d60 <HAL_ADC_Init+0x348>)
 8000c4e:	4013      	ands	r3, r2
 8000c50:	0019      	movs	r1, r3
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	685a      	ldr	r2, [r3, #4]
 8000c56:	23f0      	movs	r3, #240	; 0xf0
 8000c58:	039b      	lsls	r3, r3, #14
 8000c5a:	401a      	ands	r2, r3
 8000c5c:	4b3f      	ldr	r3, [pc, #252]	; (8000d5c <HAL_ADC_Init+0x344>)
 8000c5e:	430a      	orrs	r2, r1
 8000c60:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	6818      	ldr	r0, [r3, #0]
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c6a:	001a      	movs	r2, r3
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	f7ff fdb2 	bl	80007d6 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	6818      	ldr	r0, [r3, #0]
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c7a:	493a      	ldr	r1, [pc, #232]	; (8000d64 <HAL_ADC_Init+0x34c>)
 8000c7c:	001a      	movs	r2, r3
 8000c7e:	f7ff fdaa 	bl	80007d6 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	691b      	ldr	r3, [r3, #16]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d109      	bne.n	8000c9e <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	2110      	movs	r1, #16
 8000c96:	4249      	negs	r1, r1
 8000c98:	430a      	orrs	r2, r1
 8000c9a:	629a      	str	r2, [r3, #40]	; 0x28
 8000c9c:	e018      	b.n	8000cd0 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	691a      	ldr	r2, [r3, #16]
 8000ca2:	2380      	movs	r3, #128	; 0x80
 8000ca4:	039b      	lsls	r3, r3, #14
 8000ca6:	429a      	cmp	r2, r3
 8000ca8:	d112      	bne.n	8000cd0 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	69db      	ldr	r3, [r3, #28]
 8000cb4:	3b01      	subs	r3, #1
 8000cb6:	009b      	lsls	r3, r3, #2
 8000cb8:	221c      	movs	r2, #28
 8000cba:	4013      	ands	r3, r2
 8000cbc:	2210      	movs	r2, #16
 8000cbe:	4252      	negs	r2, r2
 8000cc0:	409a      	lsls	r2, r3
 8000cc2:	0011      	movs	r1, r2
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	430a      	orrs	r2, r1
 8000cce:	629a      	str	r2, [r3, #40]	; 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	0018      	movs	r0, r3
 8000cd8:	f7ff fd9a 	bl	8000810 <LL_ADC_GetSamplingTimeCommonChannels>
 8000cdc:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8000ce2:	429a      	cmp	r2, r3
 8000ce4:	d10b      	bne.n	8000cfe <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	2200      	movs	r2, #0
 8000cea:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cf0:	2203      	movs	r2, #3
 8000cf2:	4393      	bics	r3, r2
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	431a      	orrs	r2, r3
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	659a      	str	r2, [r3, #88]	; 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8000cfc:	e01c      	b.n	8000d38 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d02:	2212      	movs	r2, #18
 8000d04:	4393      	bics	r3, r2
 8000d06:	2210      	movs	r2, #16
 8000d08:	431a      	orrs	r2, r3
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000d12:	2201      	movs	r2, #1
 8000d14:	431a      	orrs	r2, r3
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8000d1a:	231f      	movs	r3, #31
 8000d1c:	18fb      	adds	r3, r7, r3
 8000d1e:	2201      	movs	r2, #1
 8000d20:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8000d22:	e009      	b.n	8000d38 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d28:	2210      	movs	r2, #16
 8000d2a:	431a      	orrs	r2, r3
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8000d30:	231f      	movs	r3, #31
 8000d32:	18fb      	adds	r3, r7, r3
 8000d34:	2201      	movs	r2, #1
 8000d36:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8000d38:	231f      	movs	r3, #31
 8000d3a:	18fb      	adds	r3, r7, r3
 8000d3c:	781b      	ldrb	r3, [r3, #0]
}
 8000d3e:	0018      	movs	r0, r3
 8000d40:	46bd      	mov	sp, r7
 8000d42:	b008      	add	sp, #32
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	46c0      	nop			; (mov r8, r8)
 8000d48:	20000000 	.word	0x20000000
 8000d4c:	00030d40 	.word	0x00030d40
 8000d50:	fffffefd 	.word	0xfffffefd
 8000d54:	ffde0201 	.word	0xffde0201
 8000d58:	1ffffc02 	.word	0x1ffffc02
 8000d5c:	40012708 	.word	0x40012708
 8000d60:	ffc3ffff 	.word	0xffc3ffff
 8000d64:	07ffff04 	.word	0x07ffff04

08000d68 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8000d68:	b5b0      	push	{r4, r5, r7, lr}
 8000d6a:	b084      	sub	sp, #16
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	0018      	movs	r0, r3
 8000d76:	f7ff fe3d 	bl	80009f4 <LL_ADC_REG_IsConversionOngoing>
 8000d7a:	1e03      	subs	r3, r0, #0
 8000d7c:	d15f      	bne.n	8000e3e <HAL_ADC_Start_IT+0xd6>
  {
    __HAL_LOCK(hadc);
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	2254      	movs	r2, #84	; 0x54
 8000d82:	5c9b      	ldrb	r3, [r3, r2]
 8000d84:	2b01      	cmp	r3, #1
 8000d86:	d101      	bne.n	8000d8c <HAL_ADC_Start_IT+0x24>
 8000d88:	2302      	movs	r3, #2
 8000d8a:	e05f      	b.n	8000e4c <HAL_ADC_Start_IT+0xe4>
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	2254      	movs	r2, #84	; 0x54
 8000d90:	2101      	movs	r1, #1
 8000d92:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000d94:	250f      	movs	r5, #15
 8000d96:	197c      	adds	r4, r7, r5
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	0018      	movs	r0, r3
 8000d9c:	f000 fb68 	bl	8001470 <ADC_Enable>
 8000da0:	0003      	movs	r3, r0
 8000da2:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000da4:	197b      	adds	r3, r7, r5
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d143      	bne.n	8000e34 <HAL_ADC_Start_IT+0xcc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000db0:	4a28      	ldr	r2, [pc, #160]	; (8000e54 <HAL_ADC_Start_IT+0xec>)
 8000db2:	4013      	ands	r3, r2
 8000db4:	2280      	movs	r2, #128	; 0x80
 8000db6:	0052      	lsls	r2, r2, #1
 8000db8:	431a      	orrs	r2, r3
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_REG_BUSY);


      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	221c      	movs	r2, #28
 8000dca:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	2254      	movs	r2, #84	; 0x54
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	5499      	strb	r1, [r3, r2]

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	685a      	ldr	r2, [r3, #4]
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	211c      	movs	r1, #28
 8000de0:	438a      	bics	r2, r1
 8000de2:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	695b      	ldr	r3, [r3, #20]
 8000de8:	2b08      	cmp	r3, #8
 8000dea:	d108      	bne.n	8000dfe <HAL_ADC_Start_IT+0x96>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	685a      	ldr	r2, [r3, #4]
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	2108      	movs	r1, #8
 8000df8:	430a      	orrs	r2, r1
 8000dfa:	605a      	str	r2, [r3, #4]
          break;
 8000dfc:	e008      	b.n	8000e10 <HAL_ADC_Start_IT+0xa8>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	685a      	ldr	r2, [r3, #4]
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	2104      	movs	r1, #4
 8000e0a:	430a      	orrs	r2, r1
 8000e0c:	605a      	str	r2, [r3, #4]
          break;
 8000e0e:	46c0      	nop			; (mov r8, r8)

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d107      	bne.n	8000e28 <HAL_ADC_Start_IT+0xc0>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	685a      	ldr	r2, [r3, #4]
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	2110      	movs	r1, #16
 8000e24:	430a      	orrs	r2, r1
 8000e26:	605a      	str	r2, [r3, #4]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	0018      	movs	r0, r3
 8000e2e:	f7ff fdcf 	bl	80009d0 <LL_ADC_REG_StartConversion>
 8000e32:	e008      	b.n	8000e46 <HAL_ADC_Start_IT+0xde>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	2254      	movs	r2, #84	; 0x54
 8000e38:	2100      	movs	r1, #0
 8000e3a:	5499      	strb	r1, [r3, r2]
 8000e3c:	e003      	b.n	8000e46 <HAL_ADC_Start_IT+0xde>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000e3e:	230f      	movs	r3, #15
 8000e40:	18fb      	adds	r3, r7, r3
 8000e42:	2202      	movs	r2, #2
 8000e44:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8000e46:	230f      	movs	r3, #15
 8000e48:	18fb      	adds	r3, r7, r3
 8000e4a:	781b      	ldrb	r3, [r3, #0]
}
 8000e4c:	0018      	movs	r0, r3
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	b004      	add	sp, #16
 8000e52:	bdb0      	pop	{r4, r5, r7, pc}
 8000e54:	fffff0fe 	.word	0xfffff0fe

08000e58 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8000e66:	0018      	movs	r0, r3
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	b002      	add	sp, #8
 8000e6c:	bd80      	pop	{r7, pc}
	...

08000e70 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b086      	sub	sp, #24
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8000e78:	2300      	movs	r3, #0
 8000e7a:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8000e8c:	693b      	ldr	r3, [r7, #16]
 8000e8e:	2202      	movs	r2, #2
 8000e90:	4013      	ands	r3, r2
 8000e92:	d017      	beq.n	8000ec4 <HAL_ADC_IRQHandler+0x54>
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	2202      	movs	r2, #2
 8000e98:	4013      	ands	r3, r2
 8000e9a:	d013      	beq.n	8000ec4 <HAL_ADC_IRQHandler+0x54>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ea0:	2210      	movs	r2, #16
 8000ea2:	4013      	ands	r3, r2
 8000ea4:	d106      	bne.n	8000eb4 <HAL_ADC_IRQHandler+0x44>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eaa:	2280      	movs	r2, #128	; 0x80
 8000eac:	0112      	lsls	r2, r2, #4
 8000eae:	431a      	orrs	r2, r3
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	659a      	str	r2, [r3, #88]	; 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	0018      	movs	r0, r3
 8000eb8:	f000 fb70 	bl	800159c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	2202      	movs	r2, #2
 8000ec2:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8000ec4:	693b      	ldr	r3, [r7, #16]
 8000ec6:	2204      	movs	r2, #4
 8000ec8:	4013      	ands	r3, r2
 8000eca:	d003      	beq.n	8000ed4 <HAL_ADC_IRQHandler+0x64>
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	2204      	movs	r2, #4
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	d107      	bne.n	8000ee4 <HAL_ADC_IRQHandler+0x74>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8000ed4:	693b      	ldr	r3, [r7, #16]
 8000ed6:	2208      	movs	r2, #8
 8000ed8:	4013      	ands	r3, r2
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8000eda:	d04d      	beq.n	8000f78 <HAL_ADC_IRQHandler+0x108>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	2208      	movs	r2, #8
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	d049      	beq.n	8000f78 <HAL_ADC_IRQHandler+0x108>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ee8:	2210      	movs	r2, #16
 8000eea:	4013      	ands	r3, r2
 8000eec:	d106      	bne.n	8000efc <HAL_ADC_IRQHandler+0x8c>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ef2:	2280      	movs	r2, #128	; 0x80
 8000ef4:	0092      	lsls	r2, r2, #2
 8000ef6:	431a      	orrs	r2, r3
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	0018      	movs	r0, r3
 8000f02:	f7ff fc9c 	bl	800083e <LL_ADC_REG_IsTriggerSourceSWStart>
 8000f06:	1e03      	subs	r3, r0, #0
 8000f08:	d02e      	beq.n	8000f68 <HAL_ADC_IRQHandler+0xf8>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	7e9b      	ldrb	r3, [r3, #26]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d12a      	bne.n	8000f68 <HAL_ADC_IRQHandler+0xf8>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	2208      	movs	r2, #8
 8000f1a:	4013      	ands	r3, r2
 8000f1c:	2b08      	cmp	r3, #8
 8000f1e:	d123      	bne.n	8000f68 <HAL_ADC_IRQHandler+0xf8>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	0018      	movs	r0, r3
 8000f26:	f7ff fd65 	bl	80009f4 <LL_ADC_REG_IsConversionOngoing>
 8000f2a:	1e03      	subs	r3, r0, #0
 8000f2c:	d110      	bne.n	8000f50 <HAL_ADC_IRQHandler+0xe0>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	685a      	ldr	r2, [r3, #4]
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	210c      	movs	r1, #12
 8000f3a:	438a      	bics	r2, r1
 8000f3c:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f42:	4a56      	ldr	r2, [pc, #344]	; (800109c <HAL_ADC_IRQHandler+0x22c>)
 8000f44:	4013      	ands	r3, r2
 8000f46:	2201      	movs	r2, #1
 8000f48:	431a      	orrs	r2, r3
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	659a      	str	r2, [r3, #88]	; 0x58
 8000f4e:	e00b      	b.n	8000f68 <HAL_ADC_IRQHandler+0xf8>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f54:	2220      	movs	r2, #32
 8000f56:	431a      	orrs	r2, r3
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f60:	2201      	movs	r2, #1
 8000f62:	431a      	orrs	r2, r3
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	65da      	str	r2, [r3, #92]	; 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	0018      	movs	r0, r3
 8000f6c:	f7ff fa80 	bl	8000470 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	220c      	movs	r2, #12
 8000f76:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8000f78:	693b      	ldr	r3, [r7, #16]
 8000f7a:	2280      	movs	r2, #128	; 0x80
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	d012      	beq.n	8000fa6 <HAL_ADC_IRQHandler+0x136>
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	2280      	movs	r2, #128	; 0x80
 8000f84:	4013      	ands	r3, r2
 8000f86:	d00e      	beq.n	8000fa6 <HAL_ADC_IRQHandler+0x136>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f8c:	2280      	movs	r2, #128	; 0x80
 8000f8e:	0252      	lsls	r2, r2, #9
 8000f90:	431a      	orrs	r2, r3
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	0018      	movs	r0, r3
 8000f9a:	f000 f881 	bl	80010a0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	2280      	movs	r2, #128	; 0x80
 8000fa4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8000fa6:	693a      	ldr	r2, [r7, #16]
 8000fa8:	2380      	movs	r3, #128	; 0x80
 8000faa:	005b      	lsls	r3, r3, #1
 8000fac:	4013      	ands	r3, r2
 8000fae:	d014      	beq.n	8000fda <HAL_ADC_IRQHandler+0x16a>
 8000fb0:	68fa      	ldr	r2, [r7, #12]
 8000fb2:	2380      	movs	r3, #128	; 0x80
 8000fb4:	005b      	lsls	r3, r3, #1
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	d00f      	beq.n	8000fda <HAL_ADC_IRQHandler+0x16a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fbe:	2280      	movs	r2, #128	; 0x80
 8000fc0:	0292      	lsls	r2, r2, #10
 8000fc2:	431a      	orrs	r2, r3
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	0018      	movs	r0, r3
 8000fcc:	f000 fad6 	bl	800157c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	2280      	movs	r2, #128	; 0x80
 8000fd6:	0052      	lsls	r2, r2, #1
 8000fd8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8000fda:	693a      	ldr	r2, [r7, #16]
 8000fdc:	2380      	movs	r3, #128	; 0x80
 8000fde:	009b      	lsls	r3, r3, #2
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	d014      	beq.n	800100e <HAL_ADC_IRQHandler+0x19e>
 8000fe4:	68fa      	ldr	r2, [r7, #12]
 8000fe6:	2380      	movs	r3, #128	; 0x80
 8000fe8:	009b      	lsls	r3, r3, #2
 8000fea:	4013      	ands	r3, r2
 8000fec:	d00f      	beq.n	800100e <HAL_ADC_IRQHandler+0x19e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ff2:	2280      	movs	r2, #128	; 0x80
 8000ff4:	02d2      	lsls	r2, r2, #11
 8000ff6:	431a      	orrs	r2, r3
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	0018      	movs	r0, r3
 8001000:	f000 fac4 	bl	800158c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	2280      	movs	r2, #128	; 0x80
 800100a:	0092      	lsls	r2, r2, #2
 800100c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800100e:	693b      	ldr	r3, [r7, #16]
 8001010:	2210      	movs	r2, #16
 8001012:	4013      	ands	r3, r2
 8001014:	d02b      	beq.n	800106e <HAL_ADC_IRQHandler+0x1fe>
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	2210      	movs	r2, #16
 800101a:	4013      	ands	r3, r2
 800101c:	d027      	beq.n	800106e <HAL_ADC_IRQHandler+0x1fe>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001022:	2b00      	cmp	r3, #0
 8001024:	d102      	bne.n	800102c <HAL_ADC_IRQHandler+0x1bc>
    {
      overrun_error = 1UL;
 8001026:	2301      	movs	r3, #1
 8001028:	617b      	str	r3, [r7, #20]
 800102a:	e008      	b.n	800103e <HAL_ADC_IRQHandler+0x1ce>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	0018      	movs	r0, r3
 8001032:	f7ff fc58 	bl	80008e6 <LL_ADC_REG_GetDMATransfer>
 8001036:	1e03      	subs	r3, r0, #0
 8001038:	d001      	beq.n	800103e <HAL_ADC_IRQHandler+0x1ce>
      {
        overrun_error = 1UL;
 800103a:	2301      	movs	r3, #1
 800103c:	617b      	str	r3, [r7, #20]
      }
    }

    if (overrun_error == 1UL)
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	2b01      	cmp	r3, #1
 8001042:	d110      	bne.n	8001066 <HAL_ADC_IRQHandler+0x1f6>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001048:	2280      	movs	r2, #128	; 0x80
 800104a:	00d2      	lsls	r2, r2, #3
 800104c:	431a      	orrs	r2, r3
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001056:	2202      	movs	r2, #2
 8001058:	431a      	orrs	r2, r3
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	65da      	str	r2, [r3, #92]	; 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	0018      	movs	r0, r3
 8001062:	f000 f825 	bl	80010b0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	2210      	movs	r2, #16
 800106c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check channel configuration ready flag ========== */
  if (((tmp_isr & ADC_FLAG_CCRDY) == ADC_FLAG_CCRDY) && ((tmp_ier & ADC_IT_CCRDY) == ADC_IT_CCRDY))
 800106e:	693a      	ldr	r2, [r7, #16]
 8001070:	2380      	movs	r3, #128	; 0x80
 8001072:	019b      	lsls	r3, r3, #6
 8001074:	4013      	ands	r3, r2
 8001076:	d00d      	beq.n	8001094 <HAL_ADC_IRQHandler+0x224>
 8001078:	68fa      	ldr	r2, [r7, #12]
 800107a:	2380      	movs	r3, #128	; 0x80
 800107c:	019b      	lsls	r3, r3, #6
 800107e:	4013      	ands	r3, r2
 8001080:	d008      	beq.n	8001094 <HAL_ADC_IRQHandler+0x224>
  {
    /* Channel configuration ready callback */
    HAL_ADCEx_ChannelConfigReadyCallback(hadc);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	0018      	movs	r0, r3
 8001086:	f000 fa91 	bl	80015ac <HAL_ADCEx_ChannelConfigReadyCallback>

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_CCRDY);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	2280      	movs	r2, #128	; 0x80
 8001090:	0192      	lsls	r2, r2, #6
 8001092:	601a      	str	r2, [r3, #0]
  }
}
 8001094:	46c0      	nop			; (mov r8, r8)
 8001096:	46bd      	mov	sp, r7
 8001098:	b006      	add	sp, #24
 800109a:	bd80      	pop	{r7, pc}
 800109c:	fffffefe 	.word	0xfffffefe

080010a0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80010a8:	46c0      	nop			; (mov r8, r8)
 80010aa:	46bd      	mov	sp, r7
 80010ac:	b002      	add	sp, #8
 80010ae:	bd80      	pop	{r7, pc}

080010b0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80010b8:	46c0      	nop			; (mov r8, r8)
 80010ba:	46bd      	mov	sp, r7
 80010bc:	b002      	add	sp, #8
 80010be:	bd80      	pop	{r7, pc}

080010c0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b086      	sub	sp, #24
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010ca:	2317      	movs	r3, #23
 80010cc:	18fb      	adds	r3, r7, r3
 80010ce:	2200      	movs	r2, #0
 80010d0:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80010d2:	2300      	movs	r3, #0
 80010d4:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	2254      	movs	r2, #84	; 0x54
 80010da:	5c9b      	ldrb	r3, [r3, r2]
 80010dc:	2b01      	cmp	r3, #1
 80010de:	d101      	bne.n	80010e4 <HAL_ADC_ConfigChannel+0x24>
 80010e0:	2302      	movs	r3, #2
 80010e2:	e1c0      	b.n	8001466 <HAL_ADC_ConfigChannel+0x3a6>
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2254      	movs	r2, #84	; 0x54
 80010e8:	2101      	movs	r1, #1
 80010ea:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	0018      	movs	r0, r3
 80010f2:	f7ff fc7f 	bl	80009f4 <LL_ADC_REG_IsConversionOngoing>
 80010f6:	1e03      	subs	r3, r0, #0
 80010f8:	d000      	beq.n	80010fc <HAL_ADC_ConfigChannel+0x3c>
 80010fa:	e1a3      	b.n	8001444 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	2b02      	cmp	r3, #2
 8001102:	d100      	bne.n	8001106 <HAL_ADC_ConfigChannel+0x46>
 8001104:	e143      	b.n	800138e <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	691a      	ldr	r2, [r3, #16]
 800110a:	2380      	movs	r3, #128	; 0x80
 800110c:	061b      	lsls	r3, r3, #24
 800110e:	429a      	cmp	r2, r3
 8001110:	d004      	beq.n	800111c <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001116:	4ac1      	ldr	r2, [pc, #772]	; (800141c <HAL_ADC_ConfigChannel+0x35c>)
 8001118:	4293      	cmp	r3, r2
 800111a:	d108      	bne.n	800112e <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681a      	ldr	r2, [r3, #0]
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	0019      	movs	r1, r3
 8001126:	0010      	movs	r0, r2
 8001128:	f7ff fbba 	bl	80008a0 <LL_ADC_REG_SetSequencerChAdd>
 800112c:	e0c9      	b.n	80012c2 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	211f      	movs	r1, #31
 8001138:	400b      	ands	r3, r1
 800113a:	210f      	movs	r1, #15
 800113c:	4099      	lsls	r1, r3
 800113e:	000b      	movs	r3, r1
 8001140:	43db      	mvns	r3, r3
 8001142:	4013      	ands	r3, r2
 8001144:	0019      	movs	r1, r3
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	035b      	lsls	r3, r3, #13
 800114c:	0b5b      	lsrs	r3, r3, #13
 800114e:	d105      	bne.n	800115c <HAL_ADC_ConfigChannel+0x9c>
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	0e9b      	lsrs	r3, r3, #26
 8001156:	221f      	movs	r2, #31
 8001158:	4013      	ands	r3, r2
 800115a:	e098      	b.n	800128e <HAL_ADC_ConfigChannel+0x1ce>
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	2201      	movs	r2, #1
 8001162:	4013      	ands	r3, r2
 8001164:	d000      	beq.n	8001168 <HAL_ADC_ConfigChannel+0xa8>
 8001166:	e091      	b.n	800128c <HAL_ADC_ConfigChannel+0x1cc>
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	2202      	movs	r2, #2
 800116e:	4013      	ands	r3, r2
 8001170:	d000      	beq.n	8001174 <HAL_ADC_ConfigChannel+0xb4>
 8001172:	e089      	b.n	8001288 <HAL_ADC_ConfigChannel+0x1c8>
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	2204      	movs	r2, #4
 800117a:	4013      	ands	r3, r2
 800117c:	d000      	beq.n	8001180 <HAL_ADC_ConfigChannel+0xc0>
 800117e:	e081      	b.n	8001284 <HAL_ADC_ConfigChannel+0x1c4>
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	2208      	movs	r2, #8
 8001186:	4013      	ands	r3, r2
 8001188:	d000      	beq.n	800118c <HAL_ADC_ConfigChannel+0xcc>
 800118a:	e079      	b.n	8001280 <HAL_ADC_ConfigChannel+0x1c0>
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	2210      	movs	r2, #16
 8001192:	4013      	ands	r3, r2
 8001194:	d000      	beq.n	8001198 <HAL_ADC_ConfigChannel+0xd8>
 8001196:	e071      	b.n	800127c <HAL_ADC_ConfigChannel+0x1bc>
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	2220      	movs	r2, #32
 800119e:	4013      	ands	r3, r2
 80011a0:	d000      	beq.n	80011a4 <HAL_ADC_ConfigChannel+0xe4>
 80011a2:	e069      	b.n	8001278 <HAL_ADC_ConfigChannel+0x1b8>
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	2240      	movs	r2, #64	; 0x40
 80011aa:	4013      	ands	r3, r2
 80011ac:	d000      	beq.n	80011b0 <HAL_ADC_ConfigChannel+0xf0>
 80011ae:	e061      	b.n	8001274 <HAL_ADC_ConfigChannel+0x1b4>
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	2280      	movs	r2, #128	; 0x80
 80011b6:	4013      	ands	r3, r2
 80011b8:	d000      	beq.n	80011bc <HAL_ADC_ConfigChannel+0xfc>
 80011ba:	e059      	b.n	8001270 <HAL_ADC_ConfigChannel+0x1b0>
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	2380      	movs	r3, #128	; 0x80
 80011c2:	005b      	lsls	r3, r3, #1
 80011c4:	4013      	ands	r3, r2
 80011c6:	d151      	bne.n	800126c <HAL_ADC_ConfigChannel+0x1ac>
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	681a      	ldr	r2, [r3, #0]
 80011cc:	2380      	movs	r3, #128	; 0x80
 80011ce:	009b      	lsls	r3, r3, #2
 80011d0:	4013      	ands	r3, r2
 80011d2:	d149      	bne.n	8001268 <HAL_ADC_ConfigChannel+0x1a8>
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	2380      	movs	r3, #128	; 0x80
 80011da:	00db      	lsls	r3, r3, #3
 80011dc:	4013      	ands	r3, r2
 80011de:	d141      	bne.n	8001264 <HAL_ADC_ConfigChannel+0x1a4>
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	681a      	ldr	r2, [r3, #0]
 80011e4:	2380      	movs	r3, #128	; 0x80
 80011e6:	011b      	lsls	r3, r3, #4
 80011e8:	4013      	ands	r3, r2
 80011ea:	d139      	bne.n	8001260 <HAL_ADC_ConfigChannel+0x1a0>
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	681a      	ldr	r2, [r3, #0]
 80011f0:	2380      	movs	r3, #128	; 0x80
 80011f2:	015b      	lsls	r3, r3, #5
 80011f4:	4013      	ands	r3, r2
 80011f6:	d131      	bne.n	800125c <HAL_ADC_ConfigChannel+0x19c>
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	681a      	ldr	r2, [r3, #0]
 80011fc:	2380      	movs	r3, #128	; 0x80
 80011fe:	019b      	lsls	r3, r3, #6
 8001200:	4013      	ands	r3, r2
 8001202:	d129      	bne.n	8001258 <HAL_ADC_ConfigChannel+0x198>
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	681a      	ldr	r2, [r3, #0]
 8001208:	2380      	movs	r3, #128	; 0x80
 800120a:	01db      	lsls	r3, r3, #7
 800120c:	4013      	ands	r3, r2
 800120e:	d121      	bne.n	8001254 <HAL_ADC_ConfigChannel+0x194>
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	681a      	ldr	r2, [r3, #0]
 8001214:	2380      	movs	r3, #128	; 0x80
 8001216:	021b      	lsls	r3, r3, #8
 8001218:	4013      	ands	r3, r2
 800121a:	d119      	bne.n	8001250 <HAL_ADC_ConfigChannel+0x190>
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	2380      	movs	r3, #128	; 0x80
 8001222:	025b      	lsls	r3, r3, #9
 8001224:	4013      	ands	r3, r2
 8001226:	d111      	bne.n	800124c <HAL_ADC_ConfigChannel+0x18c>
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	2380      	movs	r3, #128	; 0x80
 800122e:	029b      	lsls	r3, r3, #10
 8001230:	4013      	ands	r3, r2
 8001232:	d109      	bne.n	8001248 <HAL_ADC_ConfigChannel+0x188>
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	681a      	ldr	r2, [r3, #0]
 8001238:	2380      	movs	r3, #128	; 0x80
 800123a:	02db      	lsls	r3, r3, #11
 800123c:	4013      	ands	r3, r2
 800123e:	d001      	beq.n	8001244 <HAL_ADC_ConfigChannel+0x184>
 8001240:	2312      	movs	r3, #18
 8001242:	e024      	b.n	800128e <HAL_ADC_ConfigChannel+0x1ce>
 8001244:	2300      	movs	r3, #0
 8001246:	e022      	b.n	800128e <HAL_ADC_ConfigChannel+0x1ce>
 8001248:	2311      	movs	r3, #17
 800124a:	e020      	b.n	800128e <HAL_ADC_ConfigChannel+0x1ce>
 800124c:	2310      	movs	r3, #16
 800124e:	e01e      	b.n	800128e <HAL_ADC_ConfigChannel+0x1ce>
 8001250:	230f      	movs	r3, #15
 8001252:	e01c      	b.n	800128e <HAL_ADC_ConfigChannel+0x1ce>
 8001254:	230e      	movs	r3, #14
 8001256:	e01a      	b.n	800128e <HAL_ADC_ConfigChannel+0x1ce>
 8001258:	230d      	movs	r3, #13
 800125a:	e018      	b.n	800128e <HAL_ADC_ConfigChannel+0x1ce>
 800125c:	230c      	movs	r3, #12
 800125e:	e016      	b.n	800128e <HAL_ADC_ConfigChannel+0x1ce>
 8001260:	230b      	movs	r3, #11
 8001262:	e014      	b.n	800128e <HAL_ADC_ConfigChannel+0x1ce>
 8001264:	230a      	movs	r3, #10
 8001266:	e012      	b.n	800128e <HAL_ADC_ConfigChannel+0x1ce>
 8001268:	2309      	movs	r3, #9
 800126a:	e010      	b.n	800128e <HAL_ADC_ConfigChannel+0x1ce>
 800126c:	2308      	movs	r3, #8
 800126e:	e00e      	b.n	800128e <HAL_ADC_ConfigChannel+0x1ce>
 8001270:	2307      	movs	r3, #7
 8001272:	e00c      	b.n	800128e <HAL_ADC_ConfigChannel+0x1ce>
 8001274:	2306      	movs	r3, #6
 8001276:	e00a      	b.n	800128e <HAL_ADC_ConfigChannel+0x1ce>
 8001278:	2305      	movs	r3, #5
 800127a:	e008      	b.n	800128e <HAL_ADC_ConfigChannel+0x1ce>
 800127c:	2304      	movs	r3, #4
 800127e:	e006      	b.n	800128e <HAL_ADC_ConfigChannel+0x1ce>
 8001280:	2303      	movs	r3, #3
 8001282:	e004      	b.n	800128e <HAL_ADC_ConfigChannel+0x1ce>
 8001284:	2302      	movs	r3, #2
 8001286:	e002      	b.n	800128e <HAL_ADC_ConfigChannel+0x1ce>
 8001288:	2301      	movs	r3, #1
 800128a:	e000      	b.n	800128e <HAL_ADC_ConfigChannel+0x1ce>
 800128c:	2300      	movs	r3, #0
 800128e:	683a      	ldr	r2, [r7, #0]
 8001290:	6852      	ldr	r2, [r2, #4]
 8001292:	201f      	movs	r0, #31
 8001294:	4002      	ands	r2, r0
 8001296:	4093      	lsls	r3, r2
 8001298:	000a      	movs	r2, r1
 800129a:	431a      	orrs	r2, r3
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	089b      	lsrs	r3, r3, #2
 80012a6:	1c5a      	adds	r2, r3, #1
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	69db      	ldr	r3, [r3, #28]
 80012ac:	429a      	cmp	r2, r3
 80012ae:	d808      	bhi.n	80012c2 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6818      	ldr	r0, [r3, #0]
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	6859      	ldr	r1, [r3, #4]
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	001a      	movs	r2, r3
 80012be:	f7ff facf 	bl	8000860 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6818      	ldr	r0, [r3, #0]
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	6819      	ldr	r1, [r3, #0]
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	689b      	ldr	r3, [r3, #8]
 80012ce:	001a      	movs	r2, r3
 80012d0:	f7ff fb16 	bl	8000900 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	db00      	blt.n	80012de <HAL_ADC_ConfigChannel+0x21e>
 80012dc:	e0bc      	b.n	8001458 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80012de:	4b50      	ldr	r3, [pc, #320]	; (8001420 <HAL_ADC_ConfigChannel+0x360>)
 80012e0:	0018      	movs	r0, r3
 80012e2:	f7ff fa6b 	bl	80007bc <LL_ADC_GetCommonPathInternalCh>
 80012e6:	0003      	movs	r3, r0
 80012e8:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4a4d      	ldr	r2, [pc, #308]	; (8001424 <HAL_ADC_ConfigChannel+0x364>)
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d122      	bne.n	800133a <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80012f4:	693a      	ldr	r2, [r7, #16]
 80012f6:	2380      	movs	r3, #128	; 0x80
 80012f8:	041b      	lsls	r3, r3, #16
 80012fa:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80012fc:	d11d      	bne.n	800133a <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	2280      	movs	r2, #128	; 0x80
 8001302:	0412      	lsls	r2, r2, #16
 8001304:	4313      	orrs	r3, r2
 8001306:	4a46      	ldr	r2, [pc, #280]	; (8001420 <HAL_ADC_ConfigChannel+0x360>)
 8001308:	0019      	movs	r1, r3
 800130a:	0010      	movs	r0, r2
 800130c:	f7ff fa42 	bl	8000794 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001310:	4b45      	ldr	r3, [pc, #276]	; (8001428 <HAL_ADC_ConfigChannel+0x368>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4945      	ldr	r1, [pc, #276]	; (800142c <HAL_ADC_ConfigChannel+0x36c>)
 8001316:	0018      	movs	r0, r3
 8001318:	f7fe fef4 	bl	8000104 <__udivsi3>
 800131c:	0003      	movs	r3, r0
 800131e:	1c5a      	adds	r2, r3, #1
 8001320:	0013      	movs	r3, r2
 8001322:	005b      	lsls	r3, r3, #1
 8001324:	189b      	adds	r3, r3, r2
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800132a:	e002      	b.n	8001332 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	3b01      	subs	r3, #1
 8001330:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d1f9      	bne.n	800132c <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001338:	e08e      	b.n	8001458 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4a3c      	ldr	r2, [pc, #240]	; (8001430 <HAL_ADC_ConfigChannel+0x370>)
 8001340:	4293      	cmp	r3, r2
 8001342:	d10e      	bne.n	8001362 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001344:	693a      	ldr	r2, [r7, #16]
 8001346:	2380      	movs	r3, #128	; 0x80
 8001348:	045b      	lsls	r3, r3, #17
 800134a:	4013      	ands	r3, r2
 800134c:	d109      	bne.n	8001362 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	2280      	movs	r2, #128	; 0x80
 8001352:	0452      	lsls	r2, r2, #17
 8001354:	4313      	orrs	r3, r2
 8001356:	4a32      	ldr	r2, [pc, #200]	; (8001420 <HAL_ADC_ConfigChannel+0x360>)
 8001358:	0019      	movs	r1, r3
 800135a:	0010      	movs	r0, r2
 800135c:	f7ff fa1a 	bl	8000794 <LL_ADC_SetCommonPathInternalCh>
 8001360:	e07a      	b.n	8001458 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4a33      	ldr	r2, [pc, #204]	; (8001434 <HAL_ADC_ConfigChannel+0x374>)
 8001368:	4293      	cmp	r3, r2
 800136a:	d000      	beq.n	800136e <HAL_ADC_ConfigChannel+0x2ae>
 800136c:	e074      	b.n	8001458 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800136e:	693a      	ldr	r2, [r7, #16]
 8001370:	2380      	movs	r3, #128	; 0x80
 8001372:	03db      	lsls	r3, r3, #15
 8001374:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001376:	d000      	beq.n	800137a <HAL_ADC_ConfigChannel+0x2ba>
 8001378:	e06e      	b.n	8001458 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800137a:	693b      	ldr	r3, [r7, #16]
 800137c:	2280      	movs	r2, #128	; 0x80
 800137e:	03d2      	lsls	r2, r2, #15
 8001380:	4313      	orrs	r3, r2
 8001382:	4a27      	ldr	r2, [pc, #156]	; (8001420 <HAL_ADC_ConfigChannel+0x360>)
 8001384:	0019      	movs	r1, r3
 8001386:	0010      	movs	r0, r2
 8001388:	f7ff fa04 	bl	8000794 <LL_ADC_SetCommonPathInternalCh>
 800138c:	e064      	b.n	8001458 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	691a      	ldr	r2, [r3, #16]
 8001392:	2380      	movs	r3, #128	; 0x80
 8001394:	061b      	lsls	r3, r3, #24
 8001396:	429a      	cmp	r2, r3
 8001398:	d004      	beq.n	80013a4 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800139e:	4a1f      	ldr	r2, [pc, #124]	; (800141c <HAL_ADC_ConfigChannel+0x35c>)
 80013a0:	4293      	cmp	r3, r2
 80013a2:	d107      	bne.n	80013b4 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681a      	ldr	r2, [r3, #0]
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	0019      	movs	r1, r3
 80013ae:	0010      	movs	r0, r2
 80013b0:	f7ff fa87 	bl	80008c2 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	da4d      	bge.n	8001458 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80013bc:	4b18      	ldr	r3, [pc, #96]	; (8001420 <HAL_ADC_ConfigChannel+0x360>)
 80013be:	0018      	movs	r0, r3
 80013c0:	f7ff f9fc 	bl	80007bc <LL_ADC_GetCommonPathInternalCh>
 80013c4:	0003      	movs	r3, r0
 80013c6:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a15      	ldr	r2, [pc, #84]	; (8001424 <HAL_ADC_ConfigChannel+0x364>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d108      	bne.n	80013e4 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	4a18      	ldr	r2, [pc, #96]	; (8001438 <HAL_ADC_ConfigChannel+0x378>)
 80013d6:	4013      	ands	r3, r2
 80013d8:	4a11      	ldr	r2, [pc, #68]	; (8001420 <HAL_ADC_ConfigChannel+0x360>)
 80013da:	0019      	movs	r1, r3
 80013dc:	0010      	movs	r0, r2
 80013de:	f7ff f9d9 	bl	8000794 <LL_ADC_SetCommonPathInternalCh>
 80013e2:	e039      	b.n	8001458 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a11      	ldr	r2, [pc, #68]	; (8001430 <HAL_ADC_ConfigChannel+0x370>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d108      	bne.n	8001400 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80013ee:	693b      	ldr	r3, [r7, #16]
 80013f0:	4a12      	ldr	r2, [pc, #72]	; (800143c <HAL_ADC_ConfigChannel+0x37c>)
 80013f2:	4013      	ands	r3, r2
 80013f4:	4a0a      	ldr	r2, [pc, #40]	; (8001420 <HAL_ADC_ConfigChannel+0x360>)
 80013f6:	0019      	movs	r1, r3
 80013f8:	0010      	movs	r0, r2
 80013fa:	f7ff f9cb 	bl	8000794 <LL_ADC_SetCommonPathInternalCh>
 80013fe:	e02b      	b.n	8001458 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a0b      	ldr	r2, [pc, #44]	; (8001434 <HAL_ADC_ConfigChannel+0x374>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d126      	bne.n	8001458 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	4a0c      	ldr	r2, [pc, #48]	; (8001440 <HAL_ADC_ConfigChannel+0x380>)
 800140e:	4013      	ands	r3, r2
 8001410:	4a03      	ldr	r2, [pc, #12]	; (8001420 <HAL_ADC_ConfigChannel+0x360>)
 8001412:	0019      	movs	r1, r3
 8001414:	0010      	movs	r0, r2
 8001416:	f7ff f9bd 	bl	8000794 <LL_ADC_SetCommonPathInternalCh>
 800141a:	e01d      	b.n	8001458 <HAL_ADC_ConfigChannel+0x398>
 800141c:	80000004 	.word	0x80000004
 8001420:	40012708 	.word	0x40012708
 8001424:	b0001000 	.word	0xb0001000
 8001428:	20000000 	.word	0x20000000
 800142c:	00030d40 	.word	0x00030d40
 8001430:	b8004000 	.word	0xb8004000
 8001434:	b4002000 	.word	0xb4002000
 8001438:	ff7fffff 	.word	0xff7fffff
 800143c:	feffffff 	.word	0xfeffffff
 8001440:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001448:	2220      	movs	r2, #32
 800144a:	431a      	orrs	r2, r3
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001450:	2317      	movs	r3, #23
 8001452:	18fb      	adds	r3, r7, r3
 8001454:	2201      	movs	r2, #1
 8001456:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2254      	movs	r2, #84	; 0x54
 800145c:	2100      	movs	r1, #0
 800145e:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8001460:	2317      	movs	r3, #23
 8001462:	18fb      	adds	r3, r7, r3
 8001464:	781b      	ldrb	r3, [r3, #0]
}
 8001466:	0018      	movs	r0, r3
 8001468:	46bd      	mov	sp, r7
 800146a:	b006      	add	sp, #24
 800146c:	bd80      	pop	{r7, pc}
 800146e:	46c0      	nop			; (mov r8, r8)

08001470 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b084      	sub	sp, #16
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001478:	2300      	movs	r3, #0
 800147a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	0018      	movs	r0, r3
 8001482:	f7ff fa93 	bl	80009ac <LL_ADC_IsEnabled>
 8001486:	1e03      	subs	r3, r0, #0
 8001488:	d000      	beq.n	800148c <ADC_Enable+0x1c>
 800148a:	e069      	b.n	8001560 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	689b      	ldr	r3, [r3, #8]
 8001492:	4a36      	ldr	r2, [pc, #216]	; (800156c <ADC_Enable+0xfc>)
 8001494:	4013      	ands	r3, r2
 8001496:	d00d      	beq.n	80014b4 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800149c:	2210      	movs	r2, #16
 800149e:	431a      	orrs	r2, r3
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014a8:	2201      	movs	r2, #1
 80014aa:	431a      	orrs	r2, r3
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80014b0:	2301      	movs	r3, #1
 80014b2:	e056      	b.n	8001562 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	0018      	movs	r0, r3
 80014ba:	f7ff fa65 	bl	8000988 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 80014be:	4b2c      	ldr	r3, [pc, #176]	; (8001570 <ADC_Enable+0x100>)
 80014c0:	0018      	movs	r0, r3
 80014c2:	f7ff f97b 	bl	80007bc <LL_ADC_GetCommonPathInternalCh>
 80014c6:	0002      	movs	r2, r0
 80014c8:	2380      	movs	r3, #128	; 0x80
 80014ca:	041b      	lsls	r3, r3, #16
 80014cc:	4013      	ands	r3, r2
 80014ce:	d00f      	beq.n	80014f0 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80014d0:	4b28      	ldr	r3, [pc, #160]	; (8001574 <ADC_Enable+0x104>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4928      	ldr	r1, [pc, #160]	; (8001578 <ADC_Enable+0x108>)
 80014d6:	0018      	movs	r0, r3
 80014d8:	f7fe fe14 	bl	8000104 <__udivsi3>
 80014dc:	0003      	movs	r3, r0
 80014de:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 80014e0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80014e2:	e002      	b.n	80014ea <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 80014e4:	68bb      	ldr	r3, [r7, #8]
 80014e6:	3b01      	subs	r3, #1
 80014e8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80014ea:	68bb      	ldr	r3, [r7, #8]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d1f9      	bne.n	80014e4 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	7e5b      	ldrb	r3, [r3, #25]
 80014f4:	2b01      	cmp	r3, #1
 80014f6:	d033      	beq.n	8001560 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 80014f8:	f7ff f92c 	bl	8000754 <HAL_GetTick>
 80014fc:	0003      	movs	r3, r0
 80014fe:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001500:	e027      	b.n	8001552 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	0018      	movs	r0, r3
 8001508:	f7ff fa50 	bl	80009ac <LL_ADC_IsEnabled>
 800150c:	1e03      	subs	r3, r0, #0
 800150e:	d104      	bne.n	800151a <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	0018      	movs	r0, r3
 8001516:	f7ff fa37 	bl	8000988 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800151a:	f7ff f91b 	bl	8000754 <HAL_GetTick>
 800151e:	0002      	movs	r2, r0
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	1ad3      	subs	r3, r2, r3
 8001524:	2b02      	cmp	r3, #2
 8001526:	d914      	bls.n	8001552 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	2201      	movs	r2, #1
 8001530:	4013      	ands	r3, r2
 8001532:	2b01      	cmp	r3, #1
 8001534:	d00d      	beq.n	8001552 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800153a:	2210      	movs	r2, #16
 800153c:	431a      	orrs	r2, r3
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001546:	2201      	movs	r2, #1
 8001548:	431a      	orrs	r2, r3
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 800154e:	2301      	movs	r3, #1
 8001550:	e007      	b.n	8001562 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	2201      	movs	r2, #1
 800155a:	4013      	ands	r3, r2
 800155c:	2b01      	cmp	r3, #1
 800155e:	d1d0      	bne.n	8001502 <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001560:	2300      	movs	r3, #0
}
 8001562:	0018      	movs	r0, r3
 8001564:	46bd      	mov	sp, r7
 8001566:	b004      	add	sp, #16
 8001568:	bd80      	pop	{r7, pc}
 800156a:	46c0      	nop			; (mov r8, r8)
 800156c:	80000017 	.word	0x80000017
 8001570:	40012708 	.word	0x40012708
 8001574:	20000000 	.word	0x20000000
 8001578:	00030d40 	.word	0x00030d40

0800157c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8001584:	46c0      	nop			; (mov r8, r8)
 8001586:	46bd      	mov	sp, r7
 8001588:	b002      	add	sp, #8
 800158a:	bd80      	pop	{r7, pc}

0800158c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8001594:	46c0      	nop			; (mov r8, r8)
 8001596:	46bd      	mov	sp, r7
 8001598:	b002      	add	sp, #8
 800159a:	bd80      	pop	{r7, pc}

0800159c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80015a4:	46c0      	nop			; (mov r8, r8)
 80015a6:	46bd      	mov	sp, r7
 80015a8:	b002      	add	sp, #8
 80015aa:	bd80      	pop	{r7, pc}

080015ac <HAL_ADCEx_ChannelConfigReadyCallback>:
  * @brief  ADC channel configuration ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_ChannelConfigReadyCallback(ADC_HandleTypeDef *hadc)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_ChannelConfigReadyCallback must be implemented in the user file.
  */
}
 80015b4:	46c0      	nop			; (mov r8, r8)
 80015b6:	46bd      	mov	sp, r7
 80015b8:	b002      	add	sp, #8
 80015ba:	bd80      	pop	{r7, pc}

080015bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	0002      	movs	r2, r0
 80015c4:	1dfb      	adds	r3, r7, #7
 80015c6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80015c8:	1dfb      	adds	r3, r7, #7
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	2b7f      	cmp	r3, #127	; 0x7f
 80015ce:	d809      	bhi.n	80015e4 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015d0:	1dfb      	adds	r3, r7, #7
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	001a      	movs	r2, r3
 80015d6:	231f      	movs	r3, #31
 80015d8:	401a      	ands	r2, r3
 80015da:	4b04      	ldr	r3, [pc, #16]	; (80015ec <__NVIC_EnableIRQ+0x30>)
 80015dc:	2101      	movs	r1, #1
 80015de:	4091      	lsls	r1, r2
 80015e0:	000a      	movs	r2, r1
 80015e2:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80015e4:	46c0      	nop			; (mov r8, r8)
 80015e6:	46bd      	mov	sp, r7
 80015e8:	b002      	add	sp, #8
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	e000e100 	.word	0xe000e100

080015f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015f0:	b590      	push	{r4, r7, lr}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	0002      	movs	r2, r0
 80015f8:	6039      	str	r1, [r7, #0]
 80015fa:	1dfb      	adds	r3, r7, #7
 80015fc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80015fe:	1dfb      	adds	r3, r7, #7
 8001600:	781b      	ldrb	r3, [r3, #0]
 8001602:	2b7f      	cmp	r3, #127	; 0x7f
 8001604:	d828      	bhi.n	8001658 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001606:	4a2f      	ldr	r2, [pc, #188]	; (80016c4 <__NVIC_SetPriority+0xd4>)
 8001608:	1dfb      	adds	r3, r7, #7
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	b25b      	sxtb	r3, r3
 800160e:	089b      	lsrs	r3, r3, #2
 8001610:	33c0      	adds	r3, #192	; 0xc0
 8001612:	009b      	lsls	r3, r3, #2
 8001614:	589b      	ldr	r3, [r3, r2]
 8001616:	1dfa      	adds	r2, r7, #7
 8001618:	7812      	ldrb	r2, [r2, #0]
 800161a:	0011      	movs	r1, r2
 800161c:	2203      	movs	r2, #3
 800161e:	400a      	ands	r2, r1
 8001620:	00d2      	lsls	r2, r2, #3
 8001622:	21ff      	movs	r1, #255	; 0xff
 8001624:	4091      	lsls	r1, r2
 8001626:	000a      	movs	r2, r1
 8001628:	43d2      	mvns	r2, r2
 800162a:	401a      	ands	r2, r3
 800162c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	019b      	lsls	r3, r3, #6
 8001632:	22ff      	movs	r2, #255	; 0xff
 8001634:	401a      	ands	r2, r3
 8001636:	1dfb      	adds	r3, r7, #7
 8001638:	781b      	ldrb	r3, [r3, #0]
 800163a:	0018      	movs	r0, r3
 800163c:	2303      	movs	r3, #3
 800163e:	4003      	ands	r3, r0
 8001640:	00db      	lsls	r3, r3, #3
 8001642:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001644:	481f      	ldr	r0, [pc, #124]	; (80016c4 <__NVIC_SetPriority+0xd4>)
 8001646:	1dfb      	adds	r3, r7, #7
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	b25b      	sxtb	r3, r3
 800164c:	089b      	lsrs	r3, r3, #2
 800164e:	430a      	orrs	r2, r1
 8001650:	33c0      	adds	r3, #192	; 0xc0
 8001652:	009b      	lsls	r3, r3, #2
 8001654:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001656:	e031      	b.n	80016bc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001658:	4a1b      	ldr	r2, [pc, #108]	; (80016c8 <__NVIC_SetPriority+0xd8>)
 800165a:	1dfb      	adds	r3, r7, #7
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	0019      	movs	r1, r3
 8001660:	230f      	movs	r3, #15
 8001662:	400b      	ands	r3, r1
 8001664:	3b08      	subs	r3, #8
 8001666:	089b      	lsrs	r3, r3, #2
 8001668:	3306      	adds	r3, #6
 800166a:	009b      	lsls	r3, r3, #2
 800166c:	18d3      	adds	r3, r2, r3
 800166e:	3304      	adds	r3, #4
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	1dfa      	adds	r2, r7, #7
 8001674:	7812      	ldrb	r2, [r2, #0]
 8001676:	0011      	movs	r1, r2
 8001678:	2203      	movs	r2, #3
 800167a:	400a      	ands	r2, r1
 800167c:	00d2      	lsls	r2, r2, #3
 800167e:	21ff      	movs	r1, #255	; 0xff
 8001680:	4091      	lsls	r1, r2
 8001682:	000a      	movs	r2, r1
 8001684:	43d2      	mvns	r2, r2
 8001686:	401a      	ands	r2, r3
 8001688:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	019b      	lsls	r3, r3, #6
 800168e:	22ff      	movs	r2, #255	; 0xff
 8001690:	401a      	ands	r2, r3
 8001692:	1dfb      	adds	r3, r7, #7
 8001694:	781b      	ldrb	r3, [r3, #0]
 8001696:	0018      	movs	r0, r3
 8001698:	2303      	movs	r3, #3
 800169a:	4003      	ands	r3, r0
 800169c:	00db      	lsls	r3, r3, #3
 800169e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80016a0:	4809      	ldr	r0, [pc, #36]	; (80016c8 <__NVIC_SetPriority+0xd8>)
 80016a2:	1dfb      	adds	r3, r7, #7
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	001c      	movs	r4, r3
 80016a8:	230f      	movs	r3, #15
 80016aa:	4023      	ands	r3, r4
 80016ac:	3b08      	subs	r3, #8
 80016ae:	089b      	lsrs	r3, r3, #2
 80016b0:	430a      	orrs	r2, r1
 80016b2:	3306      	adds	r3, #6
 80016b4:	009b      	lsls	r3, r3, #2
 80016b6:	18c3      	adds	r3, r0, r3
 80016b8:	3304      	adds	r3, #4
 80016ba:	601a      	str	r2, [r3, #0]
}
 80016bc:	46c0      	nop			; (mov r8, r8)
 80016be:	46bd      	mov	sp, r7
 80016c0:	b003      	add	sp, #12
 80016c2:	bd90      	pop	{r4, r7, pc}
 80016c4:	e000e100 	.word	0xe000e100
 80016c8:	e000ed00 	.word	0xe000ed00

080016cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	1e5a      	subs	r2, r3, #1
 80016d8:	2380      	movs	r3, #128	; 0x80
 80016da:	045b      	lsls	r3, r3, #17
 80016dc:	429a      	cmp	r2, r3
 80016de:	d301      	bcc.n	80016e4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016e0:	2301      	movs	r3, #1
 80016e2:	e010      	b.n	8001706 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016e4:	4b0a      	ldr	r3, [pc, #40]	; (8001710 <SysTick_Config+0x44>)
 80016e6:	687a      	ldr	r2, [r7, #4]
 80016e8:	3a01      	subs	r2, #1
 80016ea:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016ec:	2301      	movs	r3, #1
 80016ee:	425b      	negs	r3, r3
 80016f0:	2103      	movs	r1, #3
 80016f2:	0018      	movs	r0, r3
 80016f4:	f7ff ff7c 	bl	80015f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016f8:	4b05      	ldr	r3, [pc, #20]	; (8001710 <SysTick_Config+0x44>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016fe:	4b04      	ldr	r3, [pc, #16]	; (8001710 <SysTick_Config+0x44>)
 8001700:	2207      	movs	r2, #7
 8001702:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001704:	2300      	movs	r3, #0
}
 8001706:	0018      	movs	r0, r3
 8001708:	46bd      	mov	sp, r7
 800170a:	b002      	add	sp, #8
 800170c:	bd80      	pop	{r7, pc}
 800170e:	46c0      	nop			; (mov r8, r8)
 8001710:	e000e010 	.word	0xe000e010

08001714 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b084      	sub	sp, #16
 8001718:	af00      	add	r7, sp, #0
 800171a:	60b9      	str	r1, [r7, #8]
 800171c:	607a      	str	r2, [r7, #4]
 800171e:	210f      	movs	r1, #15
 8001720:	187b      	adds	r3, r7, r1
 8001722:	1c02      	adds	r2, r0, #0
 8001724:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001726:	68ba      	ldr	r2, [r7, #8]
 8001728:	187b      	adds	r3, r7, r1
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	b25b      	sxtb	r3, r3
 800172e:	0011      	movs	r1, r2
 8001730:	0018      	movs	r0, r3
 8001732:	f7ff ff5d 	bl	80015f0 <__NVIC_SetPriority>
}
 8001736:	46c0      	nop			; (mov r8, r8)
 8001738:	46bd      	mov	sp, r7
 800173a:	b004      	add	sp, #16
 800173c:	bd80      	pop	{r7, pc}

0800173e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800173e:	b580      	push	{r7, lr}
 8001740:	b082      	sub	sp, #8
 8001742:	af00      	add	r7, sp, #0
 8001744:	0002      	movs	r2, r0
 8001746:	1dfb      	adds	r3, r7, #7
 8001748:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800174a:	1dfb      	adds	r3, r7, #7
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	b25b      	sxtb	r3, r3
 8001750:	0018      	movs	r0, r3
 8001752:	f7ff ff33 	bl	80015bc <__NVIC_EnableIRQ>
}
 8001756:	46c0      	nop			; (mov r8, r8)
 8001758:	46bd      	mov	sp, r7
 800175a:	b002      	add	sp, #8
 800175c:	bd80      	pop	{r7, pc}

0800175e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800175e:	b580      	push	{r7, lr}
 8001760:	b082      	sub	sp, #8
 8001762:	af00      	add	r7, sp, #0
 8001764:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	0018      	movs	r0, r3
 800176a:	f7ff ffaf 	bl	80016cc <SysTick_Config>
 800176e:	0003      	movs	r3, r0
}
 8001770:	0018      	movs	r0, r3
 8001772:	46bd      	mov	sp, r7
 8001774:	b002      	add	sp, #8
 8001776:	bd80      	pop	{r7, pc}

08001778 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b086      	sub	sp, #24
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
 8001780:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001782:	2300      	movs	r3, #0
 8001784:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001786:	e147      	b.n	8001a18 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	2101      	movs	r1, #1
 800178e:	697a      	ldr	r2, [r7, #20]
 8001790:	4091      	lsls	r1, r2
 8001792:	000a      	movs	r2, r1
 8001794:	4013      	ands	r3, r2
 8001796:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d100      	bne.n	80017a0 <HAL_GPIO_Init+0x28>
 800179e:	e138      	b.n	8001a12 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	2203      	movs	r2, #3
 80017a6:	4013      	ands	r3, r2
 80017a8:	2b01      	cmp	r3, #1
 80017aa:	d005      	beq.n	80017b8 <HAL_GPIO_Init+0x40>
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	2203      	movs	r2, #3
 80017b2:	4013      	ands	r3, r2
 80017b4:	2b02      	cmp	r3, #2
 80017b6:	d130      	bne.n	800181a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	005b      	lsls	r3, r3, #1
 80017c2:	2203      	movs	r2, #3
 80017c4:	409a      	lsls	r2, r3
 80017c6:	0013      	movs	r3, r2
 80017c8:	43da      	mvns	r2, r3
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	4013      	ands	r3, r2
 80017ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	68da      	ldr	r2, [r3, #12]
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	005b      	lsls	r3, r3, #1
 80017d8:	409a      	lsls	r2, r3
 80017da:	0013      	movs	r3, r2
 80017dc:	693a      	ldr	r2, [r7, #16]
 80017de:	4313      	orrs	r3, r2
 80017e0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	693a      	ldr	r2, [r7, #16]
 80017e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80017ee:	2201      	movs	r2, #1
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	409a      	lsls	r2, r3
 80017f4:	0013      	movs	r3, r2
 80017f6:	43da      	mvns	r2, r3
 80017f8:	693b      	ldr	r3, [r7, #16]
 80017fa:	4013      	ands	r3, r2
 80017fc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	091b      	lsrs	r3, r3, #4
 8001804:	2201      	movs	r2, #1
 8001806:	401a      	ands	r2, r3
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	409a      	lsls	r2, r3
 800180c:	0013      	movs	r3, r2
 800180e:	693a      	ldr	r2, [r7, #16]
 8001810:	4313      	orrs	r3, r2
 8001812:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	693a      	ldr	r2, [r7, #16]
 8001818:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	2203      	movs	r2, #3
 8001820:	4013      	ands	r3, r2
 8001822:	2b03      	cmp	r3, #3
 8001824:	d017      	beq.n	8001856 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	68db      	ldr	r3, [r3, #12]
 800182a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	005b      	lsls	r3, r3, #1
 8001830:	2203      	movs	r2, #3
 8001832:	409a      	lsls	r2, r3
 8001834:	0013      	movs	r3, r2
 8001836:	43da      	mvns	r2, r3
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	4013      	ands	r3, r2
 800183c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	689a      	ldr	r2, [r3, #8]
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	005b      	lsls	r3, r3, #1
 8001846:	409a      	lsls	r2, r3
 8001848:	0013      	movs	r3, r2
 800184a:	693a      	ldr	r2, [r7, #16]
 800184c:	4313      	orrs	r3, r2
 800184e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	693a      	ldr	r2, [r7, #16]
 8001854:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	2203      	movs	r2, #3
 800185c:	4013      	ands	r3, r2
 800185e:	2b02      	cmp	r3, #2
 8001860:	d123      	bne.n	80018aa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	08da      	lsrs	r2, r3, #3
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	3208      	adds	r2, #8
 800186a:	0092      	lsls	r2, r2, #2
 800186c:	58d3      	ldr	r3, [r2, r3]
 800186e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	2207      	movs	r2, #7
 8001874:	4013      	ands	r3, r2
 8001876:	009b      	lsls	r3, r3, #2
 8001878:	220f      	movs	r2, #15
 800187a:	409a      	lsls	r2, r3
 800187c:	0013      	movs	r3, r2
 800187e:	43da      	mvns	r2, r3
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	4013      	ands	r3, r2
 8001884:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	691a      	ldr	r2, [r3, #16]
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	2107      	movs	r1, #7
 800188e:	400b      	ands	r3, r1
 8001890:	009b      	lsls	r3, r3, #2
 8001892:	409a      	lsls	r2, r3
 8001894:	0013      	movs	r3, r2
 8001896:	693a      	ldr	r2, [r7, #16]
 8001898:	4313      	orrs	r3, r2
 800189a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	08da      	lsrs	r2, r3, #3
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	3208      	adds	r2, #8
 80018a4:	0092      	lsls	r2, r2, #2
 80018a6:	6939      	ldr	r1, [r7, #16]
 80018a8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	005b      	lsls	r3, r3, #1
 80018b4:	2203      	movs	r2, #3
 80018b6:	409a      	lsls	r2, r3
 80018b8:	0013      	movs	r3, r2
 80018ba:	43da      	mvns	r2, r3
 80018bc:	693b      	ldr	r3, [r7, #16]
 80018be:	4013      	ands	r3, r2
 80018c0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	2203      	movs	r2, #3
 80018c8:	401a      	ands	r2, r3
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	005b      	lsls	r3, r3, #1
 80018ce:	409a      	lsls	r2, r3
 80018d0:	0013      	movs	r3, r2
 80018d2:	693a      	ldr	r2, [r7, #16]
 80018d4:	4313      	orrs	r3, r2
 80018d6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	693a      	ldr	r2, [r7, #16]
 80018dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	685a      	ldr	r2, [r3, #4]
 80018e2:	23c0      	movs	r3, #192	; 0xc0
 80018e4:	029b      	lsls	r3, r3, #10
 80018e6:	4013      	ands	r3, r2
 80018e8:	d100      	bne.n	80018ec <HAL_GPIO_Init+0x174>
 80018ea:	e092      	b.n	8001a12 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80018ec:	4a50      	ldr	r2, [pc, #320]	; (8001a30 <HAL_GPIO_Init+0x2b8>)
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	089b      	lsrs	r3, r3, #2
 80018f2:	3318      	adds	r3, #24
 80018f4:	009b      	lsls	r3, r3, #2
 80018f6:	589b      	ldr	r3, [r3, r2]
 80018f8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	2203      	movs	r2, #3
 80018fe:	4013      	ands	r3, r2
 8001900:	00db      	lsls	r3, r3, #3
 8001902:	220f      	movs	r2, #15
 8001904:	409a      	lsls	r2, r3
 8001906:	0013      	movs	r3, r2
 8001908:	43da      	mvns	r2, r3
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	4013      	ands	r3, r2
 800190e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001910:	687a      	ldr	r2, [r7, #4]
 8001912:	23a0      	movs	r3, #160	; 0xa0
 8001914:	05db      	lsls	r3, r3, #23
 8001916:	429a      	cmp	r2, r3
 8001918:	d013      	beq.n	8001942 <HAL_GPIO_Init+0x1ca>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	4a45      	ldr	r2, [pc, #276]	; (8001a34 <HAL_GPIO_Init+0x2bc>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d00d      	beq.n	800193e <HAL_GPIO_Init+0x1c6>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	4a44      	ldr	r2, [pc, #272]	; (8001a38 <HAL_GPIO_Init+0x2c0>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d007      	beq.n	800193a <HAL_GPIO_Init+0x1c2>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	4a43      	ldr	r2, [pc, #268]	; (8001a3c <HAL_GPIO_Init+0x2c4>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d101      	bne.n	8001936 <HAL_GPIO_Init+0x1be>
 8001932:	2303      	movs	r3, #3
 8001934:	e006      	b.n	8001944 <HAL_GPIO_Init+0x1cc>
 8001936:	2305      	movs	r3, #5
 8001938:	e004      	b.n	8001944 <HAL_GPIO_Init+0x1cc>
 800193a:	2302      	movs	r3, #2
 800193c:	e002      	b.n	8001944 <HAL_GPIO_Init+0x1cc>
 800193e:	2301      	movs	r3, #1
 8001940:	e000      	b.n	8001944 <HAL_GPIO_Init+0x1cc>
 8001942:	2300      	movs	r3, #0
 8001944:	697a      	ldr	r2, [r7, #20]
 8001946:	2103      	movs	r1, #3
 8001948:	400a      	ands	r2, r1
 800194a:	00d2      	lsls	r2, r2, #3
 800194c:	4093      	lsls	r3, r2
 800194e:	693a      	ldr	r2, [r7, #16]
 8001950:	4313      	orrs	r3, r2
 8001952:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001954:	4936      	ldr	r1, [pc, #216]	; (8001a30 <HAL_GPIO_Init+0x2b8>)
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	089b      	lsrs	r3, r3, #2
 800195a:	3318      	adds	r3, #24
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	693a      	ldr	r2, [r7, #16]
 8001960:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001962:	4b33      	ldr	r3, [pc, #204]	; (8001a30 <HAL_GPIO_Init+0x2b8>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	43da      	mvns	r2, r3
 800196c:	693b      	ldr	r3, [r7, #16]
 800196e:	4013      	ands	r3, r2
 8001970:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	685a      	ldr	r2, [r3, #4]
 8001976:	2380      	movs	r3, #128	; 0x80
 8001978:	035b      	lsls	r3, r3, #13
 800197a:	4013      	ands	r3, r2
 800197c:	d003      	beq.n	8001986 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800197e:	693a      	ldr	r2, [r7, #16]
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	4313      	orrs	r3, r2
 8001984:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001986:	4b2a      	ldr	r3, [pc, #168]	; (8001a30 <HAL_GPIO_Init+0x2b8>)
 8001988:	693a      	ldr	r2, [r7, #16]
 800198a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 800198c:	4b28      	ldr	r3, [pc, #160]	; (8001a30 <HAL_GPIO_Init+0x2b8>)
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	43da      	mvns	r2, r3
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	4013      	ands	r3, r2
 800199a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	685a      	ldr	r2, [r3, #4]
 80019a0:	2380      	movs	r3, #128	; 0x80
 80019a2:	039b      	lsls	r3, r3, #14
 80019a4:	4013      	ands	r3, r2
 80019a6:	d003      	beq.n	80019b0 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80019a8:	693a      	ldr	r2, [r7, #16]
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	4313      	orrs	r3, r2
 80019ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80019b0:	4b1f      	ldr	r3, [pc, #124]	; (8001a30 <HAL_GPIO_Init+0x2b8>)
 80019b2:	693a      	ldr	r2, [r7, #16]
 80019b4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80019b6:	4a1e      	ldr	r2, [pc, #120]	; (8001a30 <HAL_GPIO_Init+0x2b8>)
 80019b8:	2384      	movs	r3, #132	; 0x84
 80019ba:	58d3      	ldr	r3, [r2, r3]
 80019bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	43da      	mvns	r2, r3
 80019c2:	693b      	ldr	r3, [r7, #16]
 80019c4:	4013      	ands	r3, r2
 80019c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	685a      	ldr	r2, [r3, #4]
 80019cc:	2380      	movs	r3, #128	; 0x80
 80019ce:	029b      	lsls	r3, r3, #10
 80019d0:	4013      	ands	r3, r2
 80019d2:	d003      	beq.n	80019dc <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80019d4:	693a      	ldr	r2, [r7, #16]
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	4313      	orrs	r3, r2
 80019da:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80019dc:	4914      	ldr	r1, [pc, #80]	; (8001a30 <HAL_GPIO_Init+0x2b8>)
 80019de:	2284      	movs	r2, #132	; 0x84
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80019e4:	4a12      	ldr	r2, [pc, #72]	; (8001a30 <HAL_GPIO_Init+0x2b8>)
 80019e6:	2380      	movs	r3, #128	; 0x80
 80019e8:	58d3      	ldr	r3, [r2, r3]
 80019ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	43da      	mvns	r2, r3
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	4013      	ands	r3, r2
 80019f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	685a      	ldr	r2, [r3, #4]
 80019fa:	2380      	movs	r3, #128	; 0x80
 80019fc:	025b      	lsls	r3, r3, #9
 80019fe:	4013      	ands	r3, r2
 8001a00:	d003      	beq.n	8001a0a <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8001a02:	693a      	ldr	r2, [r7, #16]
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	4313      	orrs	r3, r2
 8001a08:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001a0a:	4909      	ldr	r1, [pc, #36]	; (8001a30 <HAL_GPIO_Init+0x2b8>)
 8001a0c:	2280      	movs	r2, #128	; 0x80
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	3301      	adds	r3, #1
 8001a16:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	40da      	lsrs	r2, r3
 8001a20:	1e13      	subs	r3, r2, #0
 8001a22:	d000      	beq.n	8001a26 <HAL_GPIO_Init+0x2ae>
 8001a24:	e6b0      	b.n	8001788 <HAL_GPIO_Init+0x10>
  }
}
 8001a26:	46c0      	nop			; (mov r8, r8)
 8001a28:	46c0      	nop			; (mov r8, r8)
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	b006      	add	sp, #24
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	40021800 	.word	0x40021800
 8001a34:	50000400 	.word	0x50000400
 8001a38:	50000800 	.word	0x50000800
 8001a3c:	50000c00 	.word	0x50000c00

08001a40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
 8001a48:	0008      	movs	r0, r1
 8001a4a:	0011      	movs	r1, r2
 8001a4c:	1cbb      	adds	r3, r7, #2
 8001a4e:	1c02      	adds	r2, r0, #0
 8001a50:	801a      	strh	r2, [r3, #0]
 8001a52:	1c7b      	adds	r3, r7, #1
 8001a54:	1c0a      	adds	r2, r1, #0
 8001a56:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a58:	1c7b      	adds	r3, r7, #1
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d004      	beq.n	8001a6a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a60:	1cbb      	adds	r3, r7, #2
 8001a62:	881a      	ldrh	r2, [r3, #0]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a68:	e003      	b.n	8001a72 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a6a:	1cbb      	adds	r3, r7, #2
 8001a6c:	881a      	ldrh	r2, [r3, #0]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001a72:	46c0      	nop			; (mov r8, r8)
 8001a74:	46bd      	mov	sp, r7
 8001a76:	b002      	add	sp, #8
 8001a78:	bd80      	pop	{r7, pc}
	...

08001a7c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b084      	sub	sp, #16
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001a84:	4b19      	ldr	r3, [pc, #100]	; (8001aec <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a19      	ldr	r2, [pc, #100]	; (8001af0 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	0019      	movs	r1, r3
 8001a8e:	4b17      	ldr	r3, [pc, #92]	; (8001aec <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001a90:	687a      	ldr	r2, [r7, #4]
 8001a92:	430a      	orrs	r2, r1
 8001a94:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a96:	687a      	ldr	r2, [r7, #4]
 8001a98:	2380      	movs	r3, #128	; 0x80
 8001a9a:	009b      	lsls	r3, r3, #2
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d11f      	bne.n	8001ae0 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001aa0:	4b14      	ldr	r3, [pc, #80]	; (8001af4 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001aa2:	681a      	ldr	r2, [r3, #0]
 8001aa4:	0013      	movs	r3, r2
 8001aa6:	005b      	lsls	r3, r3, #1
 8001aa8:	189b      	adds	r3, r3, r2
 8001aaa:	005b      	lsls	r3, r3, #1
 8001aac:	4912      	ldr	r1, [pc, #72]	; (8001af8 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001aae:	0018      	movs	r0, r3
 8001ab0:	f7fe fb28 	bl	8000104 <__udivsi3>
 8001ab4:	0003      	movs	r3, r0
 8001ab6:	3301      	adds	r3, #1
 8001ab8:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001aba:	e008      	b.n	8001ace <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d003      	beq.n	8001aca <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	3b01      	subs	r3, #1
 8001ac6:	60fb      	str	r3, [r7, #12]
 8001ac8:	e001      	b.n	8001ace <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001aca:	2303      	movs	r3, #3
 8001acc:	e009      	b.n	8001ae2 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001ace:	4b07      	ldr	r3, [pc, #28]	; (8001aec <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001ad0:	695a      	ldr	r2, [r3, #20]
 8001ad2:	2380      	movs	r3, #128	; 0x80
 8001ad4:	00db      	lsls	r3, r3, #3
 8001ad6:	401a      	ands	r2, r3
 8001ad8:	2380      	movs	r3, #128	; 0x80
 8001ada:	00db      	lsls	r3, r3, #3
 8001adc:	429a      	cmp	r2, r3
 8001ade:	d0ed      	beq.n	8001abc <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001ae0:	2300      	movs	r3, #0
}
 8001ae2:	0018      	movs	r0, r3
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	b004      	add	sp, #16
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	46c0      	nop			; (mov r8, r8)
 8001aec:	40007000 	.word	0x40007000
 8001af0:	fffff9ff 	.word	0xfffff9ff
 8001af4:	20000000 	.word	0x20000000
 8001af8:	000f4240 	.word	0x000f4240

08001afc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b088      	sub	sp, #32
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d101      	bne.n	8001b0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e2fe      	b.n	800210c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	2201      	movs	r2, #1
 8001b14:	4013      	ands	r3, r2
 8001b16:	d100      	bne.n	8001b1a <HAL_RCC_OscConfig+0x1e>
 8001b18:	e07c      	b.n	8001c14 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b1a:	4bc3      	ldr	r3, [pc, #780]	; (8001e28 <HAL_RCC_OscConfig+0x32c>)
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	2238      	movs	r2, #56	; 0x38
 8001b20:	4013      	ands	r3, r2
 8001b22:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b24:	4bc0      	ldr	r3, [pc, #768]	; (8001e28 <HAL_RCC_OscConfig+0x32c>)
 8001b26:	68db      	ldr	r3, [r3, #12]
 8001b28:	2203      	movs	r2, #3
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001b2e:	69bb      	ldr	r3, [r7, #24]
 8001b30:	2b10      	cmp	r3, #16
 8001b32:	d102      	bne.n	8001b3a <HAL_RCC_OscConfig+0x3e>
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	2b03      	cmp	r3, #3
 8001b38:	d002      	beq.n	8001b40 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001b3a:	69bb      	ldr	r3, [r7, #24]
 8001b3c:	2b08      	cmp	r3, #8
 8001b3e:	d10b      	bne.n	8001b58 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b40:	4bb9      	ldr	r3, [pc, #740]	; (8001e28 <HAL_RCC_OscConfig+0x32c>)
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	2380      	movs	r3, #128	; 0x80
 8001b46:	029b      	lsls	r3, r3, #10
 8001b48:	4013      	ands	r3, r2
 8001b4a:	d062      	beq.n	8001c12 <HAL_RCC_OscConfig+0x116>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d15e      	bne.n	8001c12 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001b54:	2301      	movs	r3, #1
 8001b56:	e2d9      	b.n	800210c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	685a      	ldr	r2, [r3, #4]
 8001b5c:	2380      	movs	r3, #128	; 0x80
 8001b5e:	025b      	lsls	r3, r3, #9
 8001b60:	429a      	cmp	r2, r3
 8001b62:	d107      	bne.n	8001b74 <HAL_RCC_OscConfig+0x78>
 8001b64:	4bb0      	ldr	r3, [pc, #704]	; (8001e28 <HAL_RCC_OscConfig+0x32c>)
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	4baf      	ldr	r3, [pc, #700]	; (8001e28 <HAL_RCC_OscConfig+0x32c>)
 8001b6a:	2180      	movs	r1, #128	; 0x80
 8001b6c:	0249      	lsls	r1, r1, #9
 8001b6e:	430a      	orrs	r2, r1
 8001b70:	601a      	str	r2, [r3, #0]
 8001b72:	e020      	b.n	8001bb6 <HAL_RCC_OscConfig+0xba>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	685a      	ldr	r2, [r3, #4]
 8001b78:	23a0      	movs	r3, #160	; 0xa0
 8001b7a:	02db      	lsls	r3, r3, #11
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d10e      	bne.n	8001b9e <HAL_RCC_OscConfig+0xa2>
 8001b80:	4ba9      	ldr	r3, [pc, #676]	; (8001e28 <HAL_RCC_OscConfig+0x32c>)
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	4ba8      	ldr	r3, [pc, #672]	; (8001e28 <HAL_RCC_OscConfig+0x32c>)
 8001b86:	2180      	movs	r1, #128	; 0x80
 8001b88:	02c9      	lsls	r1, r1, #11
 8001b8a:	430a      	orrs	r2, r1
 8001b8c:	601a      	str	r2, [r3, #0]
 8001b8e:	4ba6      	ldr	r3, [pc, #664]	; (8001e28 <HAL_RCC_OscConfig+0x32c>)
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	4ba5      	ldr	r3, [pc, #660]	; (8001e28 <HAL_RCC_OscConfig+0x32c>)
 8001b94:	2180      	movs	r1, #128	; 0x80
 8001b96:	0249      	lsls	r1, r1, #9
 8001b98:	430a      	orrs	r2, r1
 8001b9a:	601a      	str	r2, [r3, #0]
 8001b9c:	e00b      	b.n	8001bb6 <HAL_RCC_OscConfig+0xba>
 8001b9e:	4ba2      	ldr	r3, [pc, #648]	; (8001e28 <HAL_RCC_OscConfig+0x32c>)
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	4ba1      	ldr	r3, [pc, #644]	; (8001e28 <HAL_RCC_OscConfig+0x32c>)
 8001ba4:	49a1      	ldr	r1, [pc, #644]	; (8001e2c <HAL_RCC_OscConfig+0x330>)
 8001ba6:	400a      	ands	r2, r1
 8001ba8:	601a      	str	r2, [r3, #0]
 8001baa:	4b9f      	ldr	r3, [pc, #636]	; (8001e28 <HAL_RCC_OscConfig+0x32c>)
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	4b9e      	ldr	r3, [pc, #632]	; (8001e28 <HAL_RCC_OscConfig+0x32c>)
 8001bb0:	499f      	ldr	r1, [pc, #636]	; (8001e30 <HAL_RCC_OscConfig+0x334>)
 8001bb2:	400a      	ands	r2, r1
 8001bb4:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d014      	beq.n	8001be8 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bbe:	f7fe fdc9 	bl	8000754 <HAL_GetTick>
 8001bc2:	0003      	movs	r3, r0
 8001bc4:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bc6:	e008      	b.n	8001bda <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bc8:	f7fe fdc4 	bl	8000754 <HAL_GetTick>
 8001bcc:	0002      	movs	r2, r0
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	2b64      	cmp	r3, #100	; 0x64
 8001bd4:	d901      	bls.n	8001bda <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	e298      	b.n	800210c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bda:	4b93      	ldr	r3, [pc, #588]	; (8001e28 <HAL_RCC_OscConfig+0x32c>)
 8001bdc:	681a      	ldr	r2, [r3, #0]
 8001bde:	2380      	movs	r3, #128	; 0x80
 8001be0:	029b      	lsls	r3, r3, #10
 8001be2:	4013      	ands	r3, r2
 8001be4:	d0f0      	beq.n	8001bc8 <HAL_RCC_OscConfig+0xcc>
 8001be6:	e015      	b.n	8001c14 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001be8:	f7fe fdb4 	bl	8000754 <HAL_GetTick>
 8001bec:	0003      	movs	r3, r0
 8001bee:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001bf0:	e008      	b.n	8001c04 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bf2:	f7fe fdaf 	bl	8000754 <HAL_GetTick>
 8001bf6:	0002      	movs	r2, r0
 8001bf8:	693b      	ldr	r3, [r7, #16]
 8001bfa:	1ad3      	subs	r3, r2, r3
 8001bfc:	2b64      	cmp	r3, #100	; 0x64
 8001bfe:	d901      	bls.n	8001c04 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001c00:	2303      	movs	r3, #3
 8001c02:	e283      	b.n	800210c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c04:	4b88      	ldr	r3, [pc, #544]	; (8001e28 <HAL_RCC_OscConfig+0x32c>)
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	2380      	movs	r3, #128	; 0x80
 8001c0a:	029b      	lsls	r3, r3, #10
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	d1f0      	bne.n	8001bf2 <HAL_RCC_OscConfig+0xf6>
 8001c10:	e000      	b.n	8001c14 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c12:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	2202      	movs	r2, #2
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	d100      	bne.n	8001c20 <HAL_RCC_OscConfig+0x124>
 8001c1e:	e099      	b.n	8001d54 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c20:	4b81      	ldr	r3, [pc, #516]	; (8001e28 <HAL_RCC_OscConfig+0x32c>)
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	2238      	movs	r2, #56	; 0x38
 8001c26:	4013      	ands	r3, r2
 8001c28:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c2a:	4b7f      	ldr	r3, [pc, #508]	; (8001e28 <HAL_RCC_OscConfig+0x32c>)
 8001c2c:	68db      	ldr	r3, [r3, #12]
 8001c2e:	2203      	movs	r2, #3
 8001c30:	4013      	ands	r3, r2
 8001c32:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001c34:	69bb      	ldr	r3, [r7, #24]
 8001c36:	2b10      	cmp	r3, #16
 8001c38:	d102      	bne.n	8001c40 <HAL_RCC_OscConfig+0x144>
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	2b02      	cmp	r3, #2
 8001c3e:	d002      	beq.n	8001c46 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001c40:	69bb      	ldr	r3, [r7, #24]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d135      	bne.n	8001cb2 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c46:	4b78      	ldr	r3, [pc, #480]	; (8001e28 <HAL_RCC_OscConfig+0x32c>)
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	2380      	movs	r3, #128	; 0x80
 8001c4c:	00db      	lsls	r3, r3, #3
 8001c4e:	4013      	ands	r3, r2
 8001c50:	d005      	beq.n	8001c5e <HAL_RCC_OscConfig+0x162>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	68db      	ldr	r3, [r3, #12]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d101      	bne.n	8001c5e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e256      	b.n	800210c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c5e:	4b72      	ldr	r3, [pc, #456]	; (8001e28 <HAL_RCC_OscConfig+0x32c>)
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	4a74      	ldr	r2, [pc, #464]	; (8001e34 <HAL_RCC_OscConfig+0x338>)
 8001c64:	4013      	ands	r3, r2
 8001c66:	0019      	movs	r1, r3
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	695b      	ldr	r3, [r3, #20]
 8001c6c:	021a      	lsls	r2, r3, #8
 8001c6e:	4b6e      	ldr	r3, [pc, #440]	; (8001e28 <HAL_RCC_OscConfig+0x32c>)
 8001c70:	430a      	orrs	r2, r1
 8001c72:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c74:	69bb      	ldr	r3, [r7, #24]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d112      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001c7a:	4b6b      	ldr	r3, [pc, #428]	; (8001e28 <HAL_RCC_OscConfig+0x32c>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a6e      	ldr	r2, [pc, #440]	; (8001e38 <HAL_RCC_OscConfig+0x33c>)
 8001c80:	4013      	ands	r3, r2
 8001c82:	0019      	movs	r1, r3
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	691a      	ldr	r2, [r3, #16]
 8001c88:	4b67      	ldr	r3, [pc, #412]	; (8001e28 <HAL_RCC_OscConfig+0x32c>)
 8001c8a:	430a      	orrs	r2, r1
 8001c8c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001c8e:	4b66      	ldr	r3, [pc, #408]	; (8001e28 <HAL_RCC_OscConfig+0x32c>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	0adb      	lsrs	r3, r3, #11
 8001c94:	2207      	movs	r2, #7
 8001c96:	4013      	ands	r3, r2
 8001c98:	4a68      	ldr	r2, [pc, #416]	; (8001e3c <HAL_RCC_OscConfig+0x340>)
 8001c9a:	40da      	lsrs	r2, r3
 8001c9c:	4b68      	ldr	r3, [pc, #416]	; (8001e40 <HAL_RCC_OscConfig+0x344>)
 8001c9e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001ca0:	4b68      	ldr	r3, [pc, #416]	; (8001e44 <HAL_RCC_OscConfig+0x348>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	0018      	movs	r0, r3
 8001ca6:	f7fe fcf9 	bl	800069c <HAL_InitTick>
 8001caa:	1e03      	subs	r3, r0, #0
 8001cac:	d051      	beq.n	8001d52 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e22c      	b.n	800210c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	68db      	ldr	r3, [r3, #12]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d030      	beq.n	8001d1c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001cba:	4b5b      	ldr	r3, [pc, #364]	; (8001e28 <HAL_RCC_OscConfig+0x32c>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a5e      	ldr	r2, [pc, #376]	; (8001e38 <HAL_RCC_OscConfig+0x33c>)
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	0019      	movs	r1, r3
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	691a      	ldr	r2, [r3, #16]
 8001cc8:	4b57      	ldr	r3, [pc, #348]	; (8001e28 <HAL_RCC_OscConfig+0x32c>)
 8001cca:	430a      	orrs	r2, r1
 8001ccc:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001cce:	4b56      	ldr	r3, [pc, #344]	; (8001e28 <HAL_RCC_OscConfig+0x32c>)
 8001cd0:	681a      	ldr	r2, [r3, #0]
 8001cd2:	4b55      	ldr	r3, [pc, #340]	; (8001e28 <HAL_RCC_OscConfig+0x32c>)
 8001cd4:	2180      	movs	r1, #128	; 0x80
 8001cd6:	0049      	lsls	r1, r1, #1
 8001cd8:	430a      	orrs	r2, r1
 8001cda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cdc:	f7fe fd3a 	bl	8000754 <HAL_GetTick>
 8001ce0:	0003      	movs	r3, r0
 8001ce2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ce4:	e008      	b.n	8001cf8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ce6:	f7fe fd35 	bl	8000754 <HAL_GetTick>
 8001cea:	0002      	movs	r2, r0
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	1ad3      	subs	r3, r2, r3
 8001cf0:	2b02      	cmp	r3, #2
 8001cf2:	d901      	bls.n	8001cf8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001cf4:	2303      	movs	r3, #3
 8001cf6:	e209      	b.n	800210c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cf8:	4b4b      	ldr	r3, [pc, #300]	; (8001e28 <HAL_RCC_OscConfig+0x32c>)
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	2380      	movs	r3, #128	; 0x80
 8001cfe:	00db      	lsls	r3, r3, #3
 8001d00:	4013      	ands	r3, r2
 8001d02:	d0f0      	beq.n	8001ce6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d04:	4b48      	ldr	r3, [pc, #288]	; (8001e28 <HAL_RCC_OscConfig+0x32c>)
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	4a4a      	ldr	r2, [pc, #296]	; (8001e34 <HAL_RCC_OscConfig+0x338>)
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	0019      	movs	r1, r3
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	695b      	ldr	r3, [r3, #20]
 8001d12:	021a      	lsls	r2, r3, #8
 8001d14:	4b44      	ldr	r3, [pc, #272]	; (8001e28 <HAL_RCC_OscConfig+0x32c>)
 8001d16:	430a      	orrs	r2, r1
 8001d18:	605a      	str	r2, [r3, #4]
 8001d1a:	e01b      	b.n	8001d54 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001d1c:	4b42      	ldr	r3, [pc, #264]	; (8001e28 <HAL_RCC_OscConfig+0x32c>)
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	4b41      	ldr	r3, [pc, #260]	; (8001e28 <HAL_RCC_OscConfig+0x32c>)
 8001d22:	4949      	ldr	r1, [pc, #292]	; (8001e48 <HAL_RCC_OscConfig+0x34c>)
 8001d24:	400a      	ands	r2, r1
 8001d26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d28:	f7fe fd14 	bl	8000754 <HAL_GetTick>
 8001d2c:	0003      	movs	r3, r0
 8001d2e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d30:	e008      	b.n	8001d44 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d32:	f7fe fd0f 	bl	8000754 <HAL_GetTick>
 8001d36:	0002      	movs	r2, r0
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	1ad3      	subs	r3, r2, r3
 8001d3c:	2b02      	cmp	r3, #2
 8001d3e:	d901      	bls.n	8001d44 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001d40:	2303      	movs	r3, #3
 8001d42:	e1e3      	b.n	800210c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d44:	4b38      	ldr	r3, [pc, #224]	; (8001e28 <HAL_RCC_OscConfig+0x32c>)
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	2380      	movs	r3, #128	; 0x80
 8001d4a:	00db      	lsls	r3, r3, #3
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	d1f0      	bne.n	8001d32 <HAL_RCC_OscConfig+0x236>
 8001d50:	e000      	b.n	8001d54 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d52:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	2208      	movs	r2, #8
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	d047      	beq.n	8001dee <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001d5e:	4b32      	ldr	r3, [pc, #200]	; (8001e28 <HAL_RCC_OscConfig+0x32c>)
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	2238      	movs	r2, #56	; 0x38
 8001d64:	4013      	ands	r3, r2
 8001d66:	2b18      	cmp	r3, #24
 8001d68:	d10a      	bne.n	8001d80 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001d6a:	4b2f      	ldr	r3, [pc, #188]	; (8001e28 <HAL_RCC_OscConfig+0x32c>)
 8001d6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d6e:	2202      	movs	r2, #2
 8001d70:	4013      	ands	r3, r2
 8001d72:	d03c      	beq.n	8001dee <HAL_RCC_OscConfig+0x2f2>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	699b      	ldr	r3, [r3, #24]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d138      	bne.n	8001dee <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	e1c5      	b.n	800210c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	699b      	ldr	r3, [r3, #24]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d019      	beq.n	8001dbc <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001d88:	4b27      	ldr	r3, [pc, #156]	; (8001e28 <HAL_RCC_OscConfig+0x32c>)
 8001d8a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001d8c:	4b26      	ldr	r3, [pc, #152]	; (8001e28 <HAL_RCC_OscConfig+0x32c>)
 8001d8e:	2101      	movs	r1, #1
 8001d90:	430a      	orrs	r2, r1
 8001d92:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d94:	f7fe fcde 	bl	8000754 <HAL_GetTick>
 8001d98:	0003      	movs	r3, r0
 8001d9a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d9c:	e008      	b.n	8001db0 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d9e:	f7fe fcd9 	bl	8000754 <HAL_GetTick>
 8001da2:	0002      	movs	r2, r0
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	1ad3      	subs	r3, r2, r3
 8001da8:	2b02      	cmp	r3, #2
 8001daa:	d901      	bls.n	8001db0 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001dac:	2303      	movs	r3, #3
 8001dae:	e1ad      	b.n	800210c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001db0:	4b1d      	ldr	r3, [pc, #116]	; (8001e28 <HAL_RCC_OscConfig+0x32c>)
 8001db2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001db4:	2202      	movs	r2, #2
 8001db6:	4013      	ands	r3, r2
 8001db8:	d0f1      	beq.n	8001d9e <HAL_RCC_OscConfig+0x2a2>
 8001dba:	e018      	b.n	8001dee <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001dbc:	4b1a      	ldr	r3, [pc, #104]	; (8001e28 <HAL_RCC_OscConfig+0x32c>)
 8001dbe:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001dc0:	4b19      	ldr	r3, [pc, #100]	; (8001e28 <HAL_RCC_OscConfig+0x32c>)
 8001dc2:	2101      	movs	r1, #1
 8001dc4:	438a      	bics	r2, r1
 8001dc6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dc8:	f7fe fcc4 	bl	8000754 <HAL_GetTick>
 8001dcc:	0003      	movs	r3, r0
 8001dce:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001dd0:	e008      	b.n	8001de4 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dd2:	f7fe fcbf 	bl	8000754 <HAL_GetTick>
 8001dd6:	0002      	movs	r2, r0
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	1ad3      	subs	r3, r2, r3
 8001ddc:	2b02      	cmp	r3, #2
 8001dde:	d901      	bls.n	8001de4 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001de0:	2303      	movs	r3, #3
 8001de2:	e193      	b.n	800210c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001de4:	4b10      	ldr	r3, [pc, #64]	; (8001e28 <HAL_RCC_OscConfig+0x32c>)
 8001de6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001de8:	2202      	movs	r2, #2
 8001dea:	4013      	ands	r3, r2
 8001dec:	d1f1      	bne.n	8001dd2 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	2204      	movs	r2, #4
 8001df4:	4013      	ands	r3, r2
 8001df6:	d100      	bne.n	8001dfa <HAL_RCC_OscConfig+0x2fe>
 8001df8:	e0c6      	b.n	8001f88 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dfa:	231f      	movs	r3, #31
 8001dfc:	18fb      	adds	r3, r7, r3
 8001dfe:	2200      	movs	r2, #0
 8001e00:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001e02:	4b09      	ldr	r3, [pc, #36]	; (8001e28 <HAL_RCC_OscConfig+0x32c>)
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	2238      	movs	r2, #56	; 0x38
 8001e08:	4013      	ands	r3, r2
 8001e0a:	2b20      	cmp	r3, #32
 8001e0c:	d11e      	bne.n	8001e4c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001e0e:	4b06      	ldr	r3, [pc, #24]	; (8001e28 <HAL_RCC_OscConfig+0x32c>)
 8001e10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e12:	2202      	movs	r2, #2
 8001e14:	4013      	ands	r3, r2
 8001e16:	d100      	bne.n	8001e1a <HAL_RCC_OscConfig+0x31e>
 8001e18:	e0b6      	b.n	8001f88 <HAL_RCC_OscConfig+0x48c>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d000      	beq.n	8001e24 <HAL_RCC_OscConfig+0x328>
 8001e22:	e0b1      	b.n	8001f88 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	e171      	b.n	800210c <HAL_RCC_OscConfig+0x610>
 8001e28:	40021000 	.word	0x40021000
 8001e2c:	fffeffff 	.word	0xfffeffff
 8001e30:	fffbffff 	.word	0xfffbffff
 8001e34:	ffff80ff 	.word	0xffff80ff
 8001e38:	ffffc7ff 	.word	0xffffc7ff
 8001e3c:	00f42400 	.word	0x00f42400
 8001e40:	20000000 	.word	0x20000000
 8001e44:	20000004 	.word	0x20000004
 8001e48:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001e4c:	4bb1      	ldr	r3, [pc, #708]	; (8002114 <HAL_RCC_OscConfig+0x618>)
 8001e4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001e50:	2380      	movs	r3, #128	; 0x80
 8001e52:	055b      	lsls	r3, r3, #21
 8001e54:	4013      	ands	r3, r2
 8001e56:	d101      	bne.n	8001e5c <HAL_RCC_OscConfig+0x360>
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e000      	b.n	8001e5e <HAL_RCC_OscConfig+0x362>
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d011      	beq.n	8001e86 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001e62:	4bac      	ldr	r3, [pc, #688]	; (8002114 <HAL_RCC_OscConfig+0x618>)
 8001e64:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001e66:	4bab      	ldr	r3, [pc, #684]	; (8002114 <HAL_RCC_OscConfig+0x618>)
 8001e68:	2180      	movs	r1, #128	; 0x80
 8001e6a:	0549      	lsls	r1, r1, #21
 8001e6c:	430a      	orrs	r2, r1
 8001e6e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001e70:	4ba8      	ldr	r3, [pc, #672]	; (8002114 <HAL_RCC_OscConfig+0x618>)
 8001e72:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001e74:	2380      	movs	r3, #128	; 0x80
 8001e76:	055b      	lsls	r3, r3, #21
 8001e78:	4013      	ands	r3, r2
 8001e7a:	60fb      	str	r3, [r7, #12]
 8001e7c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001e7e:	231f      	movs	r3, #31
 8001e80:	18fb      	adds	r3, r7, r3
 8001e82:	2201      	movs	r2, #1
 8001e84:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e86:	4ba4      	ldr	r3, [pc, #656]	; (8002118 <HAL_RCC_OscConfig+0x61c>)
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	2380      	movs	r3, #128	; 0x80
 8001e8c:	005b      	lsls	r3, r3, #1
 8001e8e:	4013      	ands	r3, r2
 8001e90:	d11a      	bne.n	8001ec8 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e92:	4ba1      	ldr	r3, [pc, #644]	; (8002118 <HAL_RCC_OscConfig+0x61c>)
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	4ba0      	ldr	r3, [pc, #640]	; (8002118 <HAL_RCC_OscConfig+0x61c>)
 8001e98:	2180      	movs	r1, #128	; 0x80
 8001e9a:	0049      	lsls	r1, r1, #1
 8001e9c:	430a      	orrs	r2, r1
 8001e9e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001ea0:	f7fe fc58 	bl	8000754 <HAL_GetTick>
 8001ea4:	0003      	movs	r3, r0
 8001ea6:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ea8:	e008      	b.n	8001ebc <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001eaa:	f7fe fc53 	bl	8000754 <HAL_GetTick>
 8001eae:	0002      	movs	r2, r0
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	1ad3      	subs	r3, r2, r3
 8001eb4:	2b02      	cmp	r3, #2
 8001eb6:	d901      	bls.n	8001ebc <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001eb8:	2303      	movs	r3, #3
 8001eba:	e127      	b.n	800210c <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ebc:	4b96      	ldr	r3, [pc, #600]	; (8002118 <HAL_RCC_OscConfig+0x61c>)
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	2380      	movs	r3, #128	; 0x80
 8001ec2:	005b      	lsls	r3, r3, #1
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	d0f0      	beq.n	8001eaa <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	2b01      	cmp	r3, #1
 8001ece:	d106      	bne.n	8001ede <HAL_RCC_OscConfig+0x3e2>
 8001ed0:	4b90      	ldr	r3, [pc, #576]	; (8002114 <HAL_RCC_OscConfig+0x618>)
 8001ed2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001ed4:	4b8f      	ldr	r3, [pc, #572]	; (8002114 <HAL_RCC_OscConfig+0x618>)
 8001ed6:	2101      	movs	r1, #1
 8001ed8:	430a      	orrs	r2, r1
 8001eda:	65da      	str	r2, [r3, #92]	; 0x5c
 8001edc:	e01c      	b.n	8001f18 <HAL_RCC_OscConfig+0x41c>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	2b05      	cmp	r3, #5
 8001ee4:	d10c      	bne.n	8001f00 <HAL_RCC_OscConfig+0x404>
 8001ee6:	4b8b      	ldr	r3, [pc, #556]	; (8002114 <HAL_RCC_OscConfig+0x618>)
 8001ee8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001eea:	4b8a      	ldr	r3, [pc, #552]	; (8002114 <HAL_RCC_OscConfig+0x618>)
 8001eec:	2104      	movs	r1, #4
 8001eee:	430a      	orrs	r2, r1
 8001ef0:	65da      	str	r2, [r3, #92]	; 0x5c
 8001ef2:	4b88      	ldr	r3, [pc, #544]	; (8002114 <HAL_RCC_OscConfig+0x618>)
 8001ef4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001ef6:	4b87      	ldr	r3, [pc, #540]	; (8002114 <HAL_RCC_OscConfig+0x618>)
 8001ef8:	2101      	movs	r1, #1
 8001efa:	430a      	orrs	r2, r1
 8001efc:	65da      	str	r2, [r3, #92]	; 0x5c
 8001efe:	e00b      	b.n	8001f18 <HAL_RCC_OscConfig+0x41c>
 8001f00:	4b84      	ldr	r3, [pc, #528]	; (8002114 <HAL_RCC_OscConfig+0x618>)
 8001f02:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001f04:	4b83      	ldr	r3, [pc, #524]	; (8002114 <HAL_RCC_OscConfig+0x618>)
 8001f06:	2101      	movs	r1, #1
 8001f08:	438a      	bics	r2, r1
 8001f0a:	65da      	str	r2, [r3, #92]	; 0x5c
 8001f0c:	4b81      	ldr	r3, [pc, #516]	; (8002114 <HAL_RCC_OscConfig+0x618>)
 8001f0e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001f10:	4b80      	ldr	r3, [pc, #512]	; (8002114 <HAL_RCC_OscConfig+0x618>)
 8001f12:	2104      	movs	r1, #4
 8001f14:	438a      	bics	r2, r1
 8001f16:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d014      	beq.n	8001f4a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f20:	f7fe fc18 	bl	8000754 <HAL_GetTick>
 8001f24:	0003      	movs	r3, r0
 8001f26:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f28:	e009      	b.n	8001f3e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f2a:	f7fe fc13 	bl	8000754 <HAL_GetTick>
 8001f2e:	0002      	movs	r2, r0
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	1ad3      	subs	r3, r2, r3
 8001f34:	4a79      	ldr	r2, [pc, #484]	; (800211c <HAL_RCC_OscConfig+0x620>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d901      	bls.n	8001f3e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	e0e6      	b.n	800210c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f3e:	4b75      	ldr	r3, [pc, #468]	; (8002114 <HAL_RCC_OscConfig+0x618>)
 8001f40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f42:	2202      	movs	r2, #2
 8001f44:	4013      	ands	r3, r2
 8001f46:	d0f0      	beq.n	8001f2a <HAL_RCC_OscConfig+0x42e>
 8001f48:	e013      	b.n	8001f72 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f4a:	f7fe fc03 	bl	8000754 <HAL_GetTick>
 8001f4e:	0003      	movs	r3, r0
 8001f50:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f52:	e009      	b.n	8001f68 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f54:	f7fe fbfe 	bl	8000754 <HAL_GetTick>
 8001f58:	0002      	movs	r2, r0
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	4a6f      	ldr	r2, [pc, #444]	; (800211c <HAL_RCC_OscConfig+0x620>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d901      	bls.n	8001f68 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001f64:	2303      	movs	r3, #3
 8001f66:	e0d1      	b.n	800210c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f68:	4b6a      	ldr	r3, [pc, #424]	; (8002114 <HAL_RCC_OscConfig+0x618>)
 8001f6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f6c:	2202      	movs	r2, #2
 8001f6e:	4013      	ands	r3, r2
 8001f70:	d1f0      	bne.n	8001f54 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001f72:	231f      	movs	r3, #31
 8001f74:	18fb      	adds	r3, r7, r3
 8001f76:	781b      	ldrb	r3, [r3, #0]
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	d105      	bne.n	8001f88 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001f7c:	4b65      	ldr	r3, [pc, #404]	; (8002114 <HAL_RCC_OscConfig+0x618>)
 8001f7e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001f80:	4b64      	ldr	r3, [pc, #400]	; (8002114 <HAL_RCC_OscConfig+0x618>)
 8001f82:	4967      	ldr	r1, [pc, #412]	; (8002120 <HAL_RCC_OscConfig+0x624>)
 8001f84:	400a      	ands	r2, r1
 8001f86:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	69db      	ldr	r3, [r3, #28]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d100      	bne.n	8001f92 <HAL_RCC_OscConfig+0x496>
 8001f90:	e0bb      	b.n	800210a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f92:	4b60      	ldr	r3, [pc, #384]	; (8002114 <HAL_RCC_OscConfig+0x618>)
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	2238      	movs	r2, #56	; 0x38
 8001f98:	4013      	ands	r3, r2
 8001f9a:	2b10      	cmp	r3, #16
 8001f9c:	d100      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x4a4>
 8001f9e:	e07b      	b.n	8002098 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	69db      	ldr	r3, [r3, #28]
 8001fa4:	2b02      	cmp	r3, #2
 8001fa6:	d156      	bne.n	8002056 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fa8:	4b5a      	ldr	r3, [pc, #360]	; (8002114 <HAL_RCC_OscConfig+0x618>)
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	4b59      	ldr	r3, [pc, #356]	; (8002114 <HAL_RCC_OscConfig+0x618>)
 8001fae:	495d      	ldr	r1, [pc, #372]	; (8002124 <HAL_RCC_OscConfig+0x628>)
 8001fb0:	400a      	ands	r2, r1
 8001fb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fb4:	f7fe fbce 	bl	8000754 <HAL_GetTick>
 8001fb8:	0003      	movs	r3, r0
 8001fba:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fbc:	e008      	b.n	8001fd0 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fbe:	f7fe fbc9 	bl	8000754 <HAL_GetTick>
 8001fc2:	0002      	movs	r2, r0
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	1ad3      	subs	r3, r2, r3
 8001fc8:	2b02      	cmp	r3, #2
 8001fca:	d901      	bls.n	8001fd0 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001fcc:	2303      	movs	r3, #3
 8001fce:	e09d      	b.n	800210c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fd0:	4b50      	ldr	r3, [pc, #320]	; (8002114 <HAL_RCC_OscConfig+0x618>)
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	2380      	movs	r3, #128	; 0x80
 8001fd6:	049b      	lsls	r3, r3, #18
 8001fd8:	4013      	ands	r3, r2
 8001fda:	d1f0      	bne.n	8001fbe <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fdc:	4b4d      	ldr	r3, [pc, #308]	; (8002114 <HAL_RCC_OscConfig+0x618>)
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	4a51      	ldr	r2, [pc, #324]	; (8002128 <HAL_RCC_OscConfig+0x62c>)
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	0019      	movs	r1, r3
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6a1a      	ldr	r2, [r3, #32]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fee:	431a      	orrs	r2, r3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ff4:	021b      	lsls	r3, r3, #8
 8001ff6:	431a      	orrs	r2, r3
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ffc:	431a      	orrs	r2, r3
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002002:	431a      	orrs	r2, r3
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002008:	431a      	orrs	r2, r3
 800200a:	4b42      	ldr	r3, [pc, #264]	; (8002114 <HAL_RCC_OscConfig+0x618>)
 800200c:	430a      	orrs	r2, r1
 800200e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002010:	4b40      	ldr	r3, [pc, #256]	; (8002114 <HAL_RCC_OscConfig+0x618>)
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	4b3f      	ldr	r3, [pc, #252]	; (8002114 <HAL_RCC_OscConfig+0x618>)
 8002016:	2180      	movs	r1, #128	; 0x80
 8002018:	0449      	lsls	r1, r1, #17
 800201a:	430a      	orrs	r2, r1
 800201c:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800201e:	4b3d      	ldr	r3, [pc, #244]	; (8002114 <HAL_RCC_OscConfig+0x618>)
 8002020:	68da      	ldr	r2, [r3, #12]
 8002022:	4b3c      	ldr	r3, [pc, #240]	; (8002114 <HAL_RCC_OscConfig+0x618>)
 8002024:	2180      	movs	r1, #128	; 0x80
 8002026:	0549      	lsls	r1, r1, #21
 8002028:	430a      	orrs	r2, r1
 800202a:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800202c:	f7fe fb92 	bl	8000754 <HAL_GetTick>
 8002030:	0003      	movs	r3, r0
 8002032:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002034:	e008      	b.n	8002048 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002036:	f7fe fb8d 	bl	8000754 <HAL_GetTick>
 800203a:	0002      	movs	r2, r0
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	1ad3      	subs	r3, r2, r3
 8002040:	2b02      	cmp	r3, #2
 8002042:	d901      	bls.n	8002048 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8002044:	2303      	movs	r3, #3
 8002046:	e061      	b.n	800210c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002048:	4b32      	ldr	r3, [pc, #200]	; (8002114 <HAL_RCC_OscConfig+0x618>)
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	2380      	movs	r3, #128	; 0x80
 800204e:	049b      	lsls	r3, r3, #18
 8002050:	4013      	ands	r3, r2
 8002052:	d0f0      	beq.n	8002036 <HAL_RCC_OscConfig+0x53a>
 8002054:	e059      	b.n	800210a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002056:	4b2f      	ldr	r3, [pc, #188]	; (8002114 <HAL_RCC_OscConfig+0x618>)
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	4b2e      	ldr	r3, [pc, #184]	; (8002114 <HAL_RCC_OscConfig+0x618>)
 800205c:	4931      	ldr	r1, [pc, #196]	; (8002124 <HAL_RCC_OscConfig+0x628>)
 800205e:	400a      	ands	r2, r1
 8002060:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002062:	f7fe fb77 	bl	8000754 <HAL_GetTick>
 8002066:	0003      	movs	r3, r0
 8002068:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800206a:	e008      	b.n	800207e <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800206c:	f7fe fb72 	bl	8000754 <HAL_GetTick>
 8002070:	0002      	movs	r2, r0
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	2b02      	cmp	r3, #2
 8002078:	d901      	bls.n	800207e <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 800207a:	2303      	movs	r3, #3
 800207c:	e046      	b.n	800210c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800207e:	4b25      	ldr	r3, [pc, #148]	; (8002114 <HAL_RCC_OscConfig+0x618>)
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	2380      	movs	r3, #128	; 0x80
 8002084:	049b      	lsls	r3, r3, #18
 8002086:	4013      	ands	r3, r2
 8002088:	d1f0      	bne.n	800206c <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800208a:	4b22      	ldr	r3, [pc, #136]	; (8002114 <HAL_RCC_OscConfig+0x618>)
 800208c:	68da      	ldr	r2, [r3, #12]
 800208e:	4b21      	ldr	r3, [pc, #132]	; (8002114 <HAL_RCC_OscConfig+0x618>)
 8002090:	4926      	ldr	r1, [pc, #152]	; (800212c <HAL_RCC_OscConfig+0x630>)
 8002092:	400a      	ands	r2, r1
 8002094:	60da      	str	r2, [r3, #12]
 8002096:	e038      	b.n	800210a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	69db      	ldr	r3, [r3, #28]
 800209c:	2b01      	cmp	r3, #1
 800209e:	d101      	bne.n	80020a4 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	e033      	b.n	800210c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80020a4:	4b1b      	ldr	r3, [pc, #108]	; (8002114 <HAL_RCC_OscConfig+0x618>)
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	2203      	movs	r2, #3
 80020ae:	401a      	ands	r2, r3
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6a1b      	ldr	r3, [r3, #32]
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d126      	bne.n	8002106 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	2270      	movs	r2, #112	; 0x70
 80020bc:	401a      	ands	r2, r3
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020c2:	429a      	cmp	r2, r3
 80020c4:	d11f      	bne.n	8002106 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80020c6:	697a      	ldr	r2, [r7, #20]
 80020c8:	23fe      	movs	r3, #254	; 0xfe
 80020ca:	01db      	lsls	r3, r3, #7
 80020cc:	401a      	ands	r2, r3
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020d2:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80020d4:	429a      	cmp	r2, r3
 80020d6:	d116      	bne.n	8002106 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80020d8:	697a      	ldr	r2, [r7, #20]
 80020da:	23f8      	movs	r3, #248	; 0xf8
 80020dc:	039b      	lsls	r3, r3, #14
 80020de:	401a      	ands	r2, r3
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d10e      	bne.n	8002106 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80020e8:	697a      	ldr	r2, [r7, #20]
 80020ea:	23e0      	movs	r3, #224	; 0xe0
 80020ec:	051b      	lsls	r3, r3, #20
 80020ee:	401a      	ands	r2, r3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d106      	bne.n	8002106 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	0f5b      	lsrs	r3, r3, #29
 80020fc:	075a      	lsls	r2, r3, #29
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002102:	429a      	cmp	r2, r3
 8002104:	d001      	beq.n	800210a <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	e000      	b.n	800210c <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 800210a:	2300      	movs	r3, #0
}
 800210c:	0018      	movs	r0, r3
 800210e:	46bd      	mov	sp, r7
 8002110:	b008      	add	sp, #32
 8002112:	bd80      	pop	{r7, pc}
 8002114:	40021000 	.word	0x40021000
 8002118:	40007000 	.word	0x40007000
 800211c:	00001388 	.word	0x00001388
 8002120:	efffffff 	.word	0xefffffff
 8002124:	feffffff 	.word	0xfeffffff
 8002128:	11c1808c 	.word	0x11c1808c
 800212c:	eefefffc 	.word	0xeefefffc

08002130 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b084      	sub	sp, #16
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
 8002138:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d101      	bne.n	8002144 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002140:	2301      	movs	r3, #1
 8002142:	e0e9      	b.n	8002318 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002144:	4b76      	ldr	r3, [pc, #472]	; (8002320 <HAL_RCC_ClockConfig+0x1f0>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	2207      	movs	r2, #7
 800214a:	4013      	ands	r3, r2
 800214c:	683a      	ldr	r2, [r7, #0]
 800214e:	429a      	cmp	r2, r3
 8002150:	d91e      	bls.n	8002190 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002152:	4b73      	ldr	r3, [pc, #460]	; (8002320 <HAL_RCC_ClockConfig+0x1f0>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	2207      	movs	r2, #7
 8002158:	4393      	bics	r3, r2
 800215a:	0019      	movs	r1, r3
 800215c:	4b70      	ldr	r3, [pc, #448]	; (8002320 <HAL_RCC_ClockConfig+0x1f0>)
 800215e:	683a      	ldr	r2, [r7, #0]
 8002160:	430a      	orrs	r2, r1
 8002162:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002164:	f7fe faf6 	bl	8000754 <HAL_GetTick>
 8002168:	0003      	movs	r3, r0
 800216a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800216c:	e009      	b.n	8002182 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800216e:	f7fe faf1 	bl	8000754 <HAL_GetTick>
 8002172:	0002      	movs	r2, r0
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	1ad3      	subs	r3, r2, r3
 8002178:	4a6a      	ldr	r2, [pc, #424]	; (8002324 <HAL_RCC_ClockConfig+0x1f4>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d901      	bls.n	8002182 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800217e:	2303      	movs	r3, #3
 8002180:	e0ca      	b.n	8002318 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002182:	4b67      	ldr	r3, [pc, #412]	; (8002320 <HAL_RCC_ClockConfig+0x1f0>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	2207      	movs	r2, #7
 8002188:	4013      	ands	r3, r2
 800218a:	683a      	ldr	r2, [r7, #0]
 800218c:	429a      	cmp	r2, r3
 800218e:	d1ee      	bne.n	800216e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	2202      	movs	r2, #2
 8002196:	4013      	ands	r3, r2
 8002198:	d015      	beq.n	80021c6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	2204      	movs	r2, #4
 80021a0:	4013      	ands	r3, r2
 80021a2:	d006      	beq.n	80021b2 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80021a4:	4b60      	ldr	r3, [pc, #384]	; (8002328 <HAL_RCC_ClockConfig+0x1f8>)
 80021a6:	689a      	ldr	r2, [r3, #8]
 80021a8:	4b5f      	ldr	r3, [pc, #380]	; (8002328 <HAL_RCC_ClockConfig+0x1f8>)
 80021aa:	21e0      	movs	r1, #224	; 0xe0
 80021ac:	01c9      	lsls	r1, r1, #7
 80021ae:	430a      	orrs	r2, r1
 80021b0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021b2:	4b5d      	ldr	r3, [pc, #372]	; (8002328 <HAL_RCC_ClockConfig+0x1f8>)
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	4a5d      	ldr	r2, [pc, #372]	; (800232c <HAL_RCC_ClockConfig+0x1fc>)
 80021b8:	4013      	ands	r3, r2
 80021ba:	0019      	movs	r1, r3
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	689a      	ldr	r2, [r3, #8]
 80021c0:	4b59      	ldr	r3, [pc, #356]	; (8002328 <HAL_RCC_ClockConfig+0x1f8>)
 80021c2:	430a      	orrs	r2, r1
 80021c4:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	2201      	movs	r2, #1
 80021cc:	4013      	ands	r3, r2
 80021ce:	d057      	beq.n	8002280 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	2b01      	cmp	r3, #1
 80021d6:	d107      	bne.n	80021e8 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021d8:	4b53      	ldr	r3, [pc, #332]	; (8002328 <HAL_RCC_ClockConfig+0x1f8>)
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	2380      	movs	r3, #128	; 0x80
 80021de:	029b      	lsls	r3, r3, #10
 80021e0:	4013      	ands	r3, r2
 80021e2:	d12b      	bne.n	800223c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	e097      	b.n	8002318 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	2b02      	cmp	r3, #2
 80021ee:	d107      	bne.n	8002200 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021f0:	4b4d      	ldr	r3, [pc, #308]	; (8002328 <HAL_RCC_ClockConfig+0x1f8>)
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	2380      	movs	r3, #128	; 0x80
 80021f6:	049b      	lsls	r3, r3, #18
 80021f8:	4013      	ands	r3, r2
 80021fa:	d11f      	bne.n	800223c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80021fc:	2301      	movs	r3, #1
 80021fe:	e08b      	b.n	8002318 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d107      	bne.n	8002218 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002208:	4b47      	ldr	r3, [pc, #284]	; (8002328 <HAL_RCC_ClockConfig+0x1f8>)
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	2380      	movs	r3, #128	; 0x80
 800220e:	00db      	lsls	r3, r3, #3
 8002210:	4013      	ands	r3, r2
 8002212:	d113      	bne.n	800223c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002214:	2301      	movs	r3, #1
 8002216:	e07f      	b.n	8002318 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	2b03      	cmp	r3, #3
 800221e:	d106      	bne.n	800222e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002220:	4b41      	ldr	r3, [pc, #260]	; (8002328 <HAL_RCC_ClockConfig+0x1f8>)
 8002222:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002224:	2202      	movs	r2, #2
 8002226:	4013      	ands	r3, r2
 8002228:	d108      	bne.n	800223c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e074      	b.n	8002318 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800222e:	4b3e      	ldr	r3, [pc, #248]	; (8002328 <HAL_RCC_ClockConfig+0x1f8>)
 8002230:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002232:	2202      	movs	r2, #2
 8002234:	4013      	ands	r3, r2
 8002236:	d101      	bne.n	800223c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	e06d      	b.n	8002318 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800223c:	4b3a      	ldr	r3, [pc, #232]	; (8002328 <HAL_RCC_ClockConfig+0x1f8>)
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	2207      	movs	r2, #7
 8002242:	4393      	bics	r3, r2
 8002244:	0019      	movs	r1, r3
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	685a      	ldr	r2, [r3, #4]
 800224a:	4b37      	ldr	r3, [pc, #220]	; (8002328 <HAL_RCC_ClockConfig+0x1f8>)
 800224c:	430a      	orrs	r2, r1
 800224e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002250:	f7fe fa80 	bl	8000754 <HAL_GetTick>
 8002254:	0003      	movs	r3, r0
 8002256:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002258:	e009      	b.n	800226e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800225a:	f7fe fa7b 	bl	8000754 <HAL_GetTick>
 800225e:	0002      	movs	r2, r0
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	1ad3      	subs	r3, r2, r3
 8002264:	4a2f      	ldr	r2, [pc, #188]	; (8002324 <HAL_RCC_ClockConfig+0x1f4>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d901      	bls.n	800226e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800226a:	2303      	movs	r3, #3
 800226c:	e054      	b.n	8002318 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800226e:	4b2e      	ldr	r3, [pc, #184]	; (8002328 <HAL_RCC_ClockConfig+0x1f8>)
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	2238      	movs	r2, #56	; 0x38
 8002274:	401a      	ands	r2, r3
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	00db      	lsls	r3, r3, #3
 800227c:	429a      	cmp	r2, r3
 800227e:	d1ec      	bne.n	800225a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002280:	4b27      	ldr	r3, [pc, #156]	; (8002320 <HAL_RCC_ClockConfig+0x1f0>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	2207      	movs	r2, #7
 8002286:	4013      	ands	r3, r2
 8002288:	683a      	ldr	r2, [r7, #0]
 800228a:	429a      	cmp	r2, r3
 800228c:	d21e      	bcs.n	80022cc <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800228e:	4b24      	ldr	r3, [pc, #144]	; (8002320 <HAL_RCC_ClockConfig+0x1f0>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	2207      	movs	r2, #7
 8002294:	4393      	bics	r3, r2
 8002296:	0019      	movs	r1, r3
 8002298:	4b21      	ldr	r3, [pc, #132]	; (8002320 <HAL_RCC_ClockConfig+0x1f0>)
 800229a:	683a      	ldr	r2, [r7, #0]
 800229c:	430a      	orrs	r2, r1
 800229e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80022a0:	f7fe fa58 	bl	8000754 <HAL_GetTick>
 80022a4:	0003      	movs	r3, r0
 80022a6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80022a8:	e009      	b.n	80022be <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022aa:	f7fe fa53 	bl	8000754 <HAL_GetTick>
 80022ae:	0002      	movs	r2, r0
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	1ad3      	subs	r3, r2, r3
 80022b4:	4a1b      	ldr	r2, [pc, #108]	; (8002324 <HAL_RCC_ClockConfig+0x1f4>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d901      	bls.n	80022be <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80022ba:	2303      	movs	r3, #3
 80022bc:	e02c      	b.n	8002318 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80022be:	4b18      	ldr	r3, [pc, #96]	; (8002320 <HAL_RCC_ClockConfig+0x1f0>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	2207      	movs	r2, #7
 80022c4:	4013      	ands	r3, r2
 80022c6:	683a      	ldr	r2, [r7, #0]
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d1ee      	bne.n	80022aa <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	2204      	movs	r2, #4
 80022d2:	4013      	ands	r3, r2
 80022d4:	d009      	beq.n	80022ea <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80022d6:	4b14      	ldr	r3, [pc, #80]	; (8002328 <HAL_RCC_ClockConfig+0x1f8>)
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	4a15      	ldr	r2, [pc, #84]	; (8002330 <HAL_RCC_ClockConfig+0x200>)
 80022dc:	4013      	ands	r3, r2
 80022de:	0019      	movs	r1, r3
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	68da      	ldr	r2, [r3, #12]
 80022e4:	4b10      	ldr	r3, [pc, #64]	; (8002328 <HAL_RCC_ClockConfig+0x1f8>)
 80022e6:	430a      	orrs	r2, r1
 80022e8:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80022ea:	f000 f829 	bl	8002340 <HAL_RCC_GetSysClockFreq>
 80022ee:	0001      	movs	r1, r0
 80022f0:	4b0d      	ldr	r3, [pc, #52]	; (8002328 <HAL_RCC_ClockConfig+0x1f8>)
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	0a1b      	lsrs	r3, r3, #8
 80022f6:	220f      	movs	r2, #15
 80022f8:	401a      	ands	r2, r3
 80022fa:	4b0e      	ldr	r3, [pc, #56]	; (8002334 <HAL_RCC_ClockConfig+0x204>)
 80022fc:	0092      	lsls	r2, r2, #2
 80022fe:	58d3      	ldr	r3, [r2, r3]
 8002300:	221f      	movs	r2, #31
 8002302:	4013      	ands	r3, r2
 8002304:	000a      	movs	r2, r1
 8002306:	40da      	lsrs	r2, r3
 8002308:	4b0b      	ldr	r3, [pc, #44]	; (8002338 <HAL_RCC_ClockConfig+0x208>)
 800230a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800230c:	4b0b      	ldr	r3, [pc, #44]	; (800233c <HAL_RCC_ClockConfig+0x20c>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	0018      	movs	r0, r3
 8002312:	f7fe f9c3 	bl	800069c <HAL_InitTick>
 8002316:	0003      	movs	r3, r0
}
 8002318:	0018      	movs	r0, r3
 800231a:	46bd      	mov	sp, r7
 800231c:	b004      	add	sp, #16
 800231e:	bd80      	pop	{r7, pc}
 8002320:	40022000 	.word	0x40022000
 8002324:	00001388 	.word	0x00001388
 8002328:	40021000 	.word	0x40021000
 800232c:	fffff0ff 	.word	0xfffff0ff
 8002330:	ffff8fff 	.word	0xffff8fff
 8002334:	080024b4 	.word	0x080024b4
 8002338:	20000000 	.word	0x20000000
 800233c:	20000004 	.word	0x20000004

08002340 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b086      	sub	sp, #24
 8002344:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002346:	4b3c      	ldr	r3, [pc, #240]	; (8002438 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	2238      	movs	r2, #56	; 0x38
 800234c:	4013      	ands	r3, r2
 800234e:	d10f      	bne.n	8002370 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002350:	4b39      	ldr	r3, [pc, #228]	; (8002438 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	0adb      	lsrs	r3, r3, #11
 8002356:	2207      	movs	r2, #7
 8002358:	4013      	ands	r3, r2
 800235a:	2201      	movs	r2, #1
 800235c:	409a      	lsls	r2, r3
 800235e:	0013      	movs	r3, r2
 8002360:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002362:	6839      	ldr	r1, [r7, #0]
 8002364:	4835      	ldr	r0, [pc, #212]	; (800243c <HAL_RCC_GetSysClockFreq+0xfc>)
 8002366:	f7fd fecd 	bl	8000104 <__udivsi3>
 800236a:	0003      	movs	r3, r0
 800236c:	613b      	str	r3, [r7, #16]
 800236e:	e05d      	b.n	800242c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002370:	4b31      	ldr	r3, [pc, #196]	; (8002438 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	2238      	movs	r2, #56	; 0x38
 8002376:	4013      	ands	r3, r2
 8002378:	2b08      	cmp	r3, #8
 800237a:	d102      	bne.n	8002382 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800237c:	4b30      	ldr	r3, [pc, #192]	; (8002440 <HAL_RCC_GetSysClockFreq+0x100>)
 800237e:	613b      	str	r3, [r7, #16]
 8002380:	e054      	b.n	800242c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002382:	4b2d      	ldr	r3, [pc, #180]	; (8002438 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	2238      	movs	r2, #56	; 0x38
 8002388:	4013      	ands	r3, r2
 800238a:	2b10      	cmp	r3, #16
 800238c:	d138      	bne.n	8002400 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800238e:	4b2a      	ldr	r3, [pc, #168]	; (8002438 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002390:	68db      	ldr	r3, [r3, #12]
 8002392:	2203      	movs	r2, #3
 8002394:	4013      	ands	r3, r2
 8002396:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002398:	4b27      	ldr	r3, [pc, #156]	; (8002438 <HAL_RCC_GetSysClockFreq+0xf8>)
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	091b      	lsrs	r3, r3, #4
 800239e:	2207      	movs	r2, #7
 80023a0:	4013      	ands	r3, r2
 80023a2:	3301      	adds	r3, #1
 80023a4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	2b03      	cmp	r3, #3
 80023aa:	d10d      	bne.n	80023c8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80023ac:	68b9      	ldr	r1, [r7, #8]
 80023ae:	4824      	ldr	r0, [pc, #144]	; (8002440 <HAL_RCC_GetSysClockFreq+0x100>)
 80023b0:	f7fd fea8 	bl	8000104 <__udivsi3>
 80023b4:	0003      	movs	r3, r0
 80023b6:	0019      	movs	r1, r3
 80023b8:	4b1f      	ldr	r3, [pc, #124]	; (8002438 <HAL_RCC_GetSysClockFreq+0xf8>)
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	0a1b      	lsrs	r3, r3, #8
 80023be:	227f      	movs	r2, #127	; 0x7f
 80023c0:	4013      	ands	r3, r2
 80023c2:	434b      	muls	r3, r1
 80023c4:	617b      	str	r3, [r7, #20]
        break;
 80023c6:	e00d      	b.n	80023e4 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80023c8:	68b9      	ldr	r1, [r7, #8]
 80023ca:	481c      	ldr	r0, [pc, #112]	; (800243c <HAL_RCC_GetSysClockFreq+0xfc>)
 80023cc:	f7fd fe9a 	bl	8000104 <__udivsi3>
 80023d0:	0003      	movs	r3, r0
 80023d2:	0019      	movs	r1, r3
 80023d4:	4b18      	ldr	r3, [pc, #96]	; (8002438 <HAL_RCC_GetSysClockFreq+0xf8>)
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	0a1b      	lsrs	r3, r3, #8
 80023da:	227f      	movs	r2, #127	; 0x7f
 80023dc:	4013      	ands	r3, r2
 80023de:	434b      	muls	r3, r1
 80023e0:	617b      	str	r3, [r7, #20]
        break;
 80023e2:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80023e4:	4b14      	ldr	r3, [pc, #80]	; (8002438 <HAL_RCC_GetSysClockFreq+0xf8>)
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	0f5b      	lsrs	r3, r3, #29
 80023ea:	2207      	movs	r2, #7
 80023ec:	4013      	ands	r3, r2
 80023ee:	3301      	adds	r3, #1
 80023f0:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80023f2:	6879      	ldr	r1, [r7, #4]
 80023f4:	6978      	ldr	r0, [r7, #20]
 80023f6:	f7fd fe85 	bl	8000104 <__udivsi3>
 80023fa:	0003      	movs	r3, r0
 80023fc:	613b      	str	r3, [r7, #16]
 80023fe:	e015      	b.n	800242c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002400:	4b0d      	ldr	r3, [pc, #52]	; (8002438 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	2238      	movs	r2, #56	; 0x38
 8002406:	4013      	ands	r3, r2
 8002408:	2b20      	cmp	r3, #32
 800240a:	d103      	bne.n	8002414 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800240c:	2380      	movs	r3, #128	; 0x80
 800240e:	021b      	lsls	r3, r3, #8
 8002410:	613b      	str	r3, [r7, #16]
 8002412:	e00b      	b.n	800242c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002414:	4b08      	ldr	r3, [pc, #32]	; (8002438 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	2238      	movs	r2, #56	; 0x38
 800241a:	4013      	ands	r3, r2
 800241c:	2b18      	cmp	r3, #24
 800241e:	d103      	bne.n	8002428 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002420:	23fa      	movs	r3, #250	; 0xfa
 8002422:	01db      	lsls	r3, r3, #7
 8002424:	613b      	str	r3, [r7, #16]
 8002426:	e001      	b.n	800242c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002428:	2300      	movs	r3, #0
 800242a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800242c:	693b      	ldr	r3, [r7, #16]
}
 800242e:	0018      	movs	r0, r3
 8002430:	46bd      	mov	sp, r7
 8002432:	b006      	add	sp, #24
 8002434:	bd80      	pop	{r7, pc}
 8002436:	46c0      	nop			; (mov r8, r8)
 8002438:	40021000 	.word	0x40021000
 800243c:	00f42400 	.word	0x00f42400
 8002440:	007a1200 	.word	0x007a1200

08002444 <memset>:
 8002444:	0003      	movs	r3, r0
 8002446:	1882      	adds	r2, r0, r2
 8002448:	4293      	cmp	r3, r2
 800244a:	d100      	bne.n	800244e <memset+0xa>
 800244c:	4770      	bx	lr
 800244e:	7019      	strb	r1, [r3, #0]
 8002450:	3301      	adds	r3, #1
 8002452:	e7f9      	b.n	8002448 <memset+0x4>

08002454 <__libc_init_array>:
 8002454:	b570      	push	{r4, r5, r6, lr}
 8002456:	2600      	movs	r6, #0
 8002458:	4c0c      	ldr	r4, [pc, #48]	; (800248c <__libc_init_array+0x38>)
 800245a:	4d0d      	ldr	r5, [pc, #52]	; (8002490 <__libc_init_array+0x3c>)
 800245c:	1b64      	subs	r4, r4, r5
 800245e:	10a4      	asrs	r4, r4, #2
 8002460:	42a6      	cmp	r6, r4
 8002462:	d109      	bne.n	8002478 <__libc_init_array+0x24>
 8002464:	2600      	movs	r6, #0
 8002466:	f000 f819 	bl	800249c <_init>
 800246a:	4c0a      	ldr	r4, [pc, #40]	; (8002494 <__libc_init_array+0x40>)
 800246c:	4d0a      	ldr	r5, [pc, #40]	; (8002498 <__libc_init_array+0x44>)
 800246e:	1b64      	subs	r4, r4, r5
 8002470:	10a4      	asrs	r4, r4, #2
 8002472:	42a6      	cmp	r6, r4
 8002474:	d105      	bne.n	8002482 <__libc_init_array+0x2e>
 8002476:	bd70      	pop	{r4, r5, r6, pc}
 8002478:	00b3      	lsls	r3, r6, #2
 800247a:	58eb      	ldr	r3, [r5, r3]
 800247c:	4798      	blx	r3
 800247e:	3601      	adds	r6, #1
 8002480:	e7ee      	b.n	8002460 <__libc_init_array+0xc>
 8002482:	00b3      	lsls	r3, r6, #2
 8002484:	58eb      	ldr	r3, [r5, r3]
 8002486:	4798      	blx	r3
 8002488:	3601      	adds	r6, #1
 800248a:	e7f2      	b.n	8002472 <__libc_init_array+0x1e>
 800248c:	080024f4 	.word	0x080024f4
 8002490:	080024f4 	.word	0x080024f4
 8002494:	080024f8 	.word	0x080024f8
 8002498:	080024f4 	.word	0x080024f4

0800249c <_init>:
 800249c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800249e:	46c0      	nop			; (mov r8, r8)
 80024a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024a2:	bc08      	pop	{r3}
 80024a4:	469e      	mov	lr, r3
 80024a6:	4770      	bx	lr

080024a8 <_fini>:
 80024a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024aa:	46c0      	nop			; (mov r8, r8)
 80024ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024ae:	bc08      	pop	{r3}
 80024b0:	469e      	mov	lr, r3
 80024b2:	4770      	bx	lr
